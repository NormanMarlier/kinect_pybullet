# -*- coding: utf-8 -*-
"""
Created on Sun Jun  7 21:46:26 2020

@author: norman marlier

Kinect sensor simulation in Pybullet
"""
import numpy as np
import zlib
import math
import time
import matplotlib.pyplot as plt
import sys
sys.path.append('..')
import kinect_pybullet
from perlin_numpy import generate_perlin_noise_2d



class KinectDots(object):
    """Use for 9x9 window matching."""
    # Kinect dots
    compressed_dots = 'x\x9c\xed\x9a\x8dr\x1b\xb9\xae\x84\xa7\xdf\xff\xa5o\xd5=\xd6\x10\xe8n`\xa8M"\xd1U\xe0nl\x0e\x89\x9f\xfe\x10\x82\x91d_\x97\x0c\xfc|A^\xf9\xff\xaf\x08\xcfqb\x9e\xaca\xfe\xde846~\xb4v\x83\xd4E\xfd\nR\xd0\x8f\xff\xff\xef\x1d\x8f{\x011?\xac\'x\x17\xd9\x08l\xe85\xac\xba\x9a\x98Y\xc4 \x9d\x8c\xd4\xeb\xaf\xc3\xb7A\xe0Z\xd1zU\t\xb8\xeed\x97j\x9fl+\xb9\x83dV\xbf\x8a\x14\x16\xc0\xc6\xa5xd\xdf\xba\x06X\xaa\xfa\x93\xee\n\xa0\x0e\x10K\x17t\x90\xc8\x987\x8f@*]\x7fd\x98\xa6\xab\x9e\xf8.\xad\x1a\xedJw~v\xcf\r\xb1Dw\xcd\x14\x0c}\xe4A:\x13\xa9\xcc.b\xb4\xd3\n\xf9\xf0s\xee\xb3\xa6w\x8b`v\xd7\x1a\x0c\x92:\x9e\x87to\xf3Q|\xb7\x06\xc2\xe2\xefd_\x19\xee0\x97\xe4e\x032\xa1\xde\x0b\xf6\x83\xd4\xae\x7f\x0b\t\xe6\x82\x145\x94\r\xd1\x8ec\xc7\x08\xbcc4\x16\xb5IR_j\x18\xb9\x880H\xf4p$\xd2\xf6N!}M\xc0\xabn\x86\xf0E\nD!\xfaZHt\xb5\x19\xa4B\xa8IUX\xfe;$\xed%\x13\x02\x9b\x9b\x1dv1\xca\xfdjC\xb4P\xdf\xbbK\xdc\xc4\x1b\xa4/#\xc5\xdd\xfbm\x92\xba\\V/y\xe7\xbc\xf1\xd6\x8ds\r\x04\xca\x13\xba"\xf6^\x95\xac\xc3\x1f\xa4\xf3\x91\xd4\xc8\x88$\x11K\xe7Nx9\xf0\xae\x826\x88\xd4Cm\xcc\x8d`b\x0c\x92Wc\xb7\xfe-R>\xc2|\xd6]n{\x8eE\x19\x8a\';\xb4\x13\xe3L\xc4sNx\xfbA\xe2\xfc\'!q<^\xa2\\HOi\xaa\xb2-|\x9d5\x18\xf9fr+\x96\x7f\x90\\\x9a\xd3\x90\x1e\x87!.(\xf4\x98SI\xa0}i\xe7\xcaf^\xda\x14Yv\xc6 \xd5\xc9\xbe\x80\x14[+\x9f\xd5\xf0\xd4{\x93~\xbb\xff\xd0DN(\xc8\xc6\xea\xf6*\xaeA\xb2\x92_\x8f\xdfB\xaa\x13!\xc5\xa0\x16\xc0\xbd\x8f`\x8a\xaa\x04\x08~q\xa7\xfbaL\xceZ\xc9\x03\xbb\x0c\xd2\xef@J\x1bu\xfc7\xc6s\x10\xdf\x0cT\xc3\xca\xd1\x11\xb2\xfd =\x8eo#\xa1\x9d\x97\xa6\xf1Q\x1a$\xb8W>\xf7\x83\x11\x8f0\x83[\xe6&\xa2\x0e\x1a$\xf7x\x1a\x92<\xa8\x08\x0e\x9b\xbc\x9c\xd6FdJ\xcf&%AH\x0cZ\xe0.\xa4\x80.\xd7 \xf9\xf1i$\xd7/\xe0u\tU\xe6\xd56d\n\xf98H\xa3\xf8\xdc\xfe\xd1\x8cAJ.G"\x95\xed\x95l^i4]\xda&\xb5\t\xdd\xc4\xaf\xb2\x067$Si\xa6(\x8a\xea<Hg#1\xdd\xcf\xcf\x02\x11}4\x9d\xf9$\xc8\xebR\xd5\xbc\x82\xb8\xa8\x9a]\x8e\xae\x99L\xaf\x0f\xd2\x99H\x7fm?\x9f\xfb\xd6\xde\x9a\xb8fh\x12\n\xfa\xb3\xde\r\x93A\xfa\x10\x12w\x8c\xf4\xca}w\xaeK4\x07\xc9ir\xa4\x9a\xce\xab\x8d\xbd$\x0c\x0f\xab\xd4{\x83\x94\xe2\x1c\x87\x94\x02!n\xf5Z\xe8T3\xa8nK\xd9^;\xb7k\xd5KT\xe5\x18\x0c&\xfa \xfd\x1a\xa4\xb7\x87H\xd8v\x83N\x8b\xe8\xd9F\'N\xc0\x1b\xad\xeb\x93\x0e\xd2G\x91\xe8\xeau\xbf\xfdb\xce\xf1\xf2M\x07\x9b\x03>\x01\xb0\xa1Y\x91\xd6\xb7\x80\x95\xcd \x1d\x89\x94\xael"\x8bw\xa5\x04(\xde\x93#\x1b\x14\xf7+\xf2W\xab\x9b\n\xe1m\xdc\x18\xa4\xe8x*\xd2\xf6\xd0\xfe\xfa\x0f\x11\xd6k\x85\xdc\xa21\xac\xfd\xc53\x99Qs\xa7\xd8o\x08\xb2\xf3\xb7"\x0c\x92\xe6{\x0f\xc9>\xbd>v\xe4V\x81\xe6\xd7\xd6*\x1a\x89\xf38\xbaJ\xd6{c\x90\xceFJ\xe7\xbb\xccQ\x1fhq\x01[\x19n\xad\xc0m\x0bR\xe2<b\x9e\x14\x14i2H\xa7"\xd9\x0e*\xc6\xce\xb1.m \x15\x10\xd3\xc27\xe8\xc4\xdd\xa0\xcd\x8f\x12\x07\xe9q\x1c\x80\xd4Fp\xf6\xf2\x14\x97\xff\x97\x0fA2\x97\xccg\xd6\x88;\xe5\xdb\xb5\x1a\xa4\xbc|\nR\xf8\xf1\xf1F.~\xaa};+*E\x9e\x05\x13n\xfaU\xef`\xce\xdf\x07\xe9Q\xec\x9e\xd5\xbfDj\x9b\x86,\x90\'\xfb\xbdiW\x8a\xa6\x944\xa1\x03mF\x84?R\x98A:\x15ILac8\xcb\xb5\x04Y\xa9\x9e%\xcef]r\xb8\x8d\x92\x0e\x928\x1f\x86\x94\xder\x83\xb6\xe4*\xf5B_\xcfY(\x8c\x91\xf3D\x95%\xd4\xd5\xf6>=\x85\xec\x83T\x08;\x08iw ~\xb9\x93i\x8fq_\x1a\xb7\x1c.\x9a"\xff/1\x8c~\xa4\xd2\xbf\x855H*\xe7\xa3H9\xb2e\xd6\xc3\xbeW\x8f\xc6j\xbf\xa0R\xa5E\x0b\xb5\xe0\x85AzK\xcd\xfeVc\xb9\x81\xf4:\xc3e\x02\xd0\x84\r\xa9\xb3VM\x10\xf2\x07_H\x94J \x96.\xa4}\xeb\x0fq\x19\xa4\x93\x91\xac\xfaf~\xa5<>\x87\x1f\\\x1b\xa9\x86\x08\xec\xc3l\xe5\x1d\xa4S\x91\xdco\xd74*\xfb\x08\x08\x7f\xe2F\xc7\xeb\xaaB\x92\x90\xad\x1d\x14\xd2|\x90\xcc\xd2aH\xa5\xed\x92\x87\xa5Q\x83-\xd5\xb6\x1c0\xfa\x0ct\xfd):;\xe6\xc4\x04[\xcb\x1b\xa4#\x91\xa4\x9d\xba62-\xb83\xc4\xbe\r\xf0#\xfa\xd1F#\x99\xae\x1a\xa4\xed\xf1a\xa4|\xc2\xc5\xce\xdc\x9c\xc9\xd0\xf6aP\x04\x0e\x96\xd4pR\x93\xe9\xb1|\xfe\xaf`\x90:\xd7/#\xc9\xdd\x17\x95\xb8\xe3\xbc\xae\xd3\xa6\x08F\xc4\x93\xf8\xa2}\x9b*\xe7}T\r8HG"m\x1c\xd4\xa7\xf0\xffA\xa8]\x08\xea\x920d#\xfdYL\x15\xf0i\x0cRc\xf6\xef\x91\xb6\x06\xdcSl+m\xb9\xf8v\t\xb7\xf9\x83\x86b\xe7\xb9\x80\x85\x8cf\x0c\xd2w\x91\xe2\xc1L\x07\x95Ol~\xb0Iz\x17^\xc0\x95U\x91\x94\xf5\x7f\xf4\xc8\xbfG\xe6\xc7 \x95R9Ve\xf7\x01$\xa3\x84f\xc8Ve\xac\x8dL6\xdd\xc5\xd2)\x86\xb1\'C\xcd<H\xad\xd4\x03\x90\x907\xe32\x9dbS\x07\xe7\x95\x04"<jk\xec\xf0\xeb\xb0\xc0\xf1q\x90j\x8b`\xf0e\xa4\xb0\xc8\x871*a\xe3`\x02\x02.\x8aT\x88\xc8\xffjP\x9d\xa8\x95\xddk\x14\xff<H\xbf\x01)\xbbo\x9cocRz\xd9\x8d\x87\x9e\xca\x1f\x9b\xab\x01u%\xd74\x87\x1d\xa4v\xa9\xd9\xf8\x10\x12\xaf\x99w\xcbX\xcbW\x11\x06k#\xe9\xde\xec\xaczk\xa3\xd2\xceh\x90\\\x90\x13\x90\xda\x8b\xd1\x1d\xe4F\x8e\xef1\xcb\xa5M\x1b.\xe9\\:\xa3C\x7f \x98\xe9\x07\xa9a8\x04\x89l\xca\xdb\xb0<\xd8\x08\rT\xf9R\xe8\xa0\'\xa6u\xfe\xb8\xeaJ\xc8_\xcee\xb1\x07\xe9:\x13\xa9\x16Ql\xdeG\x9d\x84\xb8\xf7\xf0\xcf\xa4\x97\x85}c\xf8\x0e~\xcb~\x90v\x93\xfcM\xa4\x18\xef\xd6\xc9\x87\xf4\xbe+\xcb\x9a\xe0\xe9\x81\xbe\xdb\x9b\x97u\xaek\x1dQ\xdf\n\x8f\xe4\x10\xe5\r\xd2\xd9H\xf6\xb0\xc7s\xdd\x1fo\xbb\xeb\xda"\x14-\xee\x8a\x04\xf0j\x93\x82\x1e|\xe9\x8c\xa6Abw^\xfb\x00R\x9a\xa2$\xe4\x93\x9f\xf3\xb8\x08I]_\x97bH\xac=\xa7J\xd0 \xd52\xbe\x83T&\x95\xdf\xe1\xea?\x1bL\x02L<\xe4\xe2T\xff h\x13.\xfb\xf0\x10\x14\xdd*\xb3\x9aA:\x18\xc9F}:\xb8$\xa9\n\xd4\xc5\t=\x8b+\xa3^UIT\x80\x8d9H9\xe2\x99HA\x1ch;\x1d\xd7\xaa\x06EC\x82\x1c\x9e\x8aTD\xe4\x15\x1b\x86j\x11\xb5\x0c\x92>\x9e\x82\x945\x19e68Ht~\xd9\x016wj\xd0\x14\x0b)\xf4#\x14\xed\rR\xcay(\xd2\xcej\xdey\xa3/\x92\xc3\x8f6\xd3\xb8\x17\x0c\x96\xda\xac\xc9+\x8c\x13U\xfe5T\xbaZ\x9b\xdeu\x90\xfe\x08\x89vs0\x02\xf0\xeda\x92\xa7\x06+\xcdLy\xaaW\xd0\x95\xb5\x1d\x83d\xe6g!e\xf5w\x1a\\{\x9cA\x17\xdb\'\x89\xb1\x13Rw\x91\x9dK \x85I\xee\xaf\xf8\xb8\xd7\x06\xe97 \xed\x0c\xff\xce\xc84P\x1f\xb3t\xf4M\tF\xbe\xb82U\x82\x8d1Hu\x98\xc2\xf1/#i\xc4\xd5R\xf1v\xf7\x9d\xc2K%\xd0V\x01\x1d3\xf5{\xdaV\xfb\x08\xa0+\x83\xf4\xa0\xfc\x93H\xe5l7\x7f\x98\x87\xe3\xde\xbe\xf7\xaf\xef\xdb\xb2#\xf1j-i)\xb3\x9a\x1f\x06)\xcfOB*\x12\x98D\xab\xd1\xf2W\x03x\xcf+\xf8\xbb]\xefo$wGS\xb3>HY\xd8QHEKI\xf6jw\x01\x81}*\xca7\xfa\x95\x1d\xac\x16^\x1c$\xb5=\x0f\xa90\x81\xacs\x13\x18g\xd9{\x91\t\xad\xb8\xe5\xde\\={\x99\xf2\xe8\r`k4H\xa7#\xc1ojnV\xd5\xf4\x84\xdf\x92S\x0f^\xeb\xdb!kP[j\xe9A\xaau7[\x1fC*\x85\xc4C\xde\xc8/\xd4\xc5\x02\x18\xef6\xa0c\xb1f;\xb2\xf8q\x90b\x9c\xef!a]\x9b6J:\xc4\xaf\xb7-\xf1\xa7~\xc9\xd7\xb9r\x9b\x1a%"\x82\x7f\xcc(\xf2\xc8\x92\r\x06\xe9x$\x8e\x9dt<\x0cg\x84j\xe3g=\xe3\x83m\xcb\xeeH\xb6l\xb5D\xab\xff 5\xd9+\x87\x7f\x8f\x84\xe8!\x81\xc3A\x8d\xa8\xb0\x05\xd1|\xdc\xb2\x9d\xea\xd4\x1e\xbaQV\xaf\xc8?H\x87#Q(\x97\xd9J\x0c\x0b+#\xec^^\xc3\xed\xe1j\x98\x16\xeat\xb2r\x17\x9c\x84\x0c\xd2u.\x92\x1b\xf5\x8e\xdb2\xa78-\x95\xd1pI\x15s%\xa5T`\xbbFi)rck\x90\xb2\xf5\xbfFZ\xed\xa4Br\xcf\x98\xee\xc9y\xa3\xd6\xd6H\x1f\xb7+\xdf\x05\x0c\xcb\x83\xd4\x06\xff\x16\x12}a#,<k\xf4p\x83\xfe\xb8\xff\xbc\xd3\xf2\x16w\x00\x1b\x19\xcb\xaaUi\xfbp\x90\xceD\xfa[\xedh[\xa2t\xdb\xeaC\x99E\x1b\xdc\x81\xdcu\xf0\xa0\xa0\xd5\xa6\x11\x06\xa9\x8b\xfa\x1f\x91|\xc0\x10\x08\xbc\xa7}\x18|\\~\x12b\x12\xe9\xb4Y\xda\xd8\xf2\x86\x83\xf4\x9a\x1f\x81\x14oP\xbd"\xed\xa5\xe9\x85#\xcd\xb1\xcc`\xec4\x89-"G\x06O\xa8\x9d^\x91\x06\xe9:\x1eI\xe4\xb8\xa0\x97\xc7p\xa1\xac\x01\x8al\xa6\xa1X)\x15<4d\xae\xe1E\x05\x19$\xb1;\x0b\t\xd1\xab\xd5\xe3u\x83\x9f2\xbb\xf6\x92\x91\xd1\x86\xec\xbc#\xa1\x880\x91\x06)\xda~\x17)Y\xf0o\xfaQ\x03 N\xa3\xa5\x7f+\x84\x8cv\xf9\xe2\x11\xfe*\xe4+M\xdd\xf5Y\x9e\xffY\xe6 \x9d\x8dT(1\x9b~\xde\x1a\x86\xa5\x04\x95\xab\xf20\xe2\x87\x05\xe0\xadM\xdfbs3\xd2 \xfdM$X+P\xf2\x8e%w\x1d\x8cKu\xc0\xcbA\x11L s\r$-\x83t:\x92F\x12\xeb\xf8\xb0\x92\x84+W\x0f\xb9\xe4\xc6\xf2*\xf5\xd8Z\tV2~l\xedA:\x1a\xc9\x9ez]lN\xbf\x1fZ\x928\'\xda\x8c\xdb\x0b,v\x9d\xc5 =\x8d\xef U2;\xf9\xfc\xea6\xac\x85\xd7\x8e&{w\xfc\x03P\xeaMT\x98\xa5\xdeA\xban\xdddv\x10\x12\x85\xc3Ero\xa1\x12\xafK\xc4P\xd2T\xee\xe7\x8a\x15l?`f\xd7 q\x84\x03\x91t\xa6\x9d\x12\xb5h\xb4\xad\xfc\xa5\x91\xed\x02Y\x8a\xe5Al4\x02\xd0\x95\x1ct\x90\xda\xf1I\xa4"\x9bi\xa9\xb5\xe2\x8f=7\xcd\x0e\xb37I\xab\xb7\xca\xfd\x06\x1b\xa4\xf3\x91^\x97\xa9\\\xad&\x08\x08`M\xe5\x96\xbe\xb8\x16P;\x89\x9a\x9b5%\x10{\x04\x07\xb2\x1c\xa4\xdf\x80d\x12\xd8%o[X\xfb\xce\x88^&\xa6\x851U\xb5;h\x9am\x90\xbc\xf57\x91\\\x18\xac\xac\xb0\xeeE\xe7\xa8M\xfc\x87\xde\xc8{\x1e\x9e\xb2\xb2\xa9}\x06\xe94\xa4\xe7T9*<B\x94\\\xfdHP\xe7Hs\xa40\xee\xc3\x00~\xa6\x7fs$v5\x06\xe9\x08\xa4\xe8j\xd9\xba\x03\xfdFw\xc4d\x11\x86\xba\x90"J\xb1\xac\xd4\xaa\x08\x83T\xac\x94\xe3\x83HF\x98\x1eQ\'\x90j\x91[\xad\xf3v[\x19xC\xc0\xc5\x109\xf8 \xfdl\x1e\x8ct\x7f\x01\x1d\xd7\xb5\x14\x1e\xd8\xdfF\x8d\xf6\x95M\xd1\xa3Z^\xe4\xcd\xeaM\x97\x04\x19\xa4\x93\x91\x9e\xce\xabI\xf5\xd6\xa7O\x9c4\xf6\x0c\xc5\x02\x99\xe7\x07\xae\xcc*=G\x18$\x0e\xf2\xc6\xf8\x18R\x9cZ\x17\x9f\'\xab\x03\xaf\xa6\x98Dq\x89\x9bOaGTZ\x10\xaaa\x1bz\x90\xae\xef \xf1\xe7*H~\xe1\x1e~\xf5\x9e\xe3\x97\xbc\xb9Q\xf3w<=\xe4XX\xa5B\xdaX\xa9|\x83\x0e\xd2\xd1H,\xe6\xed\xa1-\xd5\x86V#\xf7\x91"\x04aK\xa2\xad\xc9\xfbc\x90>\x80$b \xd1\x93\x07\x85\x04\xcf\xf8\xf5\xe3\x03l$\x85\x08\xb1\xf3\xbc\xa8i\x07\xe9W \x91\xf8\xa0\x87\xd5&6\x84e8P\xaa\x84[/\xf4>\xf1\xdb\xc8*z\x90NG\xaaC\x14y\x1a\x87\xe7\xa6\xf9\xe1\xba\xfb@U\x85\xc5U:\xe4m\x88\xcb\xa6\x8c\xc2h\x90x\xe7\x03H+Lh$=\xf6\xa0\xafrmr\x1a\x8bW2?\xf7X\xe1\x95j\x90}\x07\xe9d${\x98\xd3\xf3\x92\xc7\xee\xb82\xfe\xc6!O;\xd4!\x17\xbf\xf4\x90B\xa6\xee\x93\t\x7f\x1f\xa4s\x91\xba~\xd8:\xcd\xa5\xdc\xfb\x01\x11=j\x85\xb1\xbfH\xf6m\x80\xce\xc2\x85\xb5r\x06\xc9:}\x01\xc989\x8e\xa7S\xca\xc5\xb1\xf6n\x88\\\xdaM\x81\xc8\x98gu\x1d\x06\xe95=\x0c\xa9\xca$\xef\x85\x10\xfe\xd7P\x08\x7f8\xab[h\x94\xc0N\x83\xcbk\x02/\xa5\x888H\xc7 \xd1\x07\x83\xe0\x18\xb5\xbavy\xed \'J:\xa2\xf12B\xf2\x7f\xccc\x12\x0f\xd2\xde\xf2\xf5E$\xeb\xc5\x07\x95N=I\xf4\x1a\n\x19\xd2\x19\xcf\x05\xc46P\xa3`\x90\xceB\x02\xb9\x80\xe5\xef\x85o\x85Z\x1f4si+\n\x15\xbb\x14\xce`\x90\x8eG*\x1e\xdc0\x06\x9d\xf8\xfb\\\xdf\xcf\xc8F\xa6\x0c\xb5\x06\xca\xa4Ex,t\x15\xb5O4H\x1a\xe9o \xf9\xa3\xd7\xd2AI\xac\x80~\xe1a\x98\xd746\xa4\xe9\xc8A\xfa\xd9<\x1a\xc9<\xde\xa6\x81\xb0\xb8\xbaC\xd8\xd0)\xb8\xb7\x8a\xb7[*\x00i\xd9\xdc\xdc/_8\x13_\xe1A:\x1c)v\x959\x8e\x19\xd6\x9f]7\xd3\xb1TGh.]\xe5U\xaeeI\x11c\x90\xae\x93\x91\xda\x08\xb5D\xe4}ym@\xbbO#U\xe5\x15\xbb\x11S\xcd\xdb\xd0\x0f\xd6\x83\xf44\xfe\x1e\xd2\xcb\x1f\x8d\x1d\xe2\x917\x1f\xe1\xc8B\x98#\x99\xdd\xb9VH\x14\xd5\xc8*\x9ek\x03\xd17H\'#Y\xef\x18\xe7\x8d6\xdc\xb3\xdc\x0b\xa2\xcab\x89\xef\x85\\\x04\t=H\xfb\x8a\xb6\xb7*\xabw\x91\n\x03\xca\x8c\xfc\x1d\xf9\xffK#\xe7g\x98\x184\'=\xe4\xb6_\xcdk\x90~\x07\x928\x80\xb7\x96f8\x8b\x90\xb5\xa8\x83,f\x95\xeaX{F\x19\xd1\xfd\xa5\xd1\xff\x95\x0cRLv\x10\x92u\xee\x0c\xea!e\xe2&s\xb6A[\x19\x90\x03C\xe8Z\xb5\x83\xe4\x14|\x11)7J}\x86#\xa1\xeb\xc1<\x05\xaf\xa9U7\xc8\x1d\x17\xcf\\6\x93|\x904\xb2\x8djC=\x8d?Cr\x86/+8u\xf9\x02\xceA\xe1qs\xb5\xda{\xb6\xb0j\x1a2\xfa\xd6\xec\x83t"\x92\xee>\x0f:\xb3M.#\xee.\xd8\x0fEQ\n4O\xb1\xde\xbbb\xf7\xac\x06\xe9\x93H\x95}h\xa6:\x82,\xbft\x9b\x16{\xf4}\xdb\xa6\xea\xbaAzH\xf9U$d.\xbd\xa1\xd5\x0b\xb7\xe4\xec\xceF<\x13[$\x8bT\x812\x88u\xc9\x15\x1c\xa4\xdf\x80\xf4\xee\xa8\xbcL\x81jC-\\\xa0@\xfa\x1e\xc1\x11\xd7\xabK\xe1\xfd1H\xde\xf0_#\xe1\xba{\x02\xd7%\x91\x9a\x03\x1d\xf2k\xf8u\xbe\xff\xca!\x7f+\xc2 e\xd73\x91\x1eb]\x99\xf4\xba\x02\xbe\xdaDD\xa3\xe2\xb6\xd2:Qk\xb9N\x0b\xdf \xa5\xb6q$\x04\t\t\x8f\x83\xa4V\x1fF\n]\xd4\xb3uA\x9c\x15\xb7\x1cx\x07\x8e%k\xcd\xfdEd\xa5\x92A:\x0fI\xdb\x82\xfd\xcc\xe4\xa1\x17\xd9f\x0fZ\x92\xbe\xed\xd6d\x1c\xa4>\xea\xe7\x91b\x94t=\xe7sl\x92\x80\xa7\xaf\xebY\xab\x10\xa2\x87\xa5\x1c@\xb6\x9f\xd4\xde\xdf\xef/\xbe\xf5\x07\xe9`$\x1b\xc0G\x15?\xd4\xb6\xd6;\'\x07\x83\x08\xe8]\xaa5\t~\xb9l\xb6\x9e\x95x\xbf:H\x1fC\x92\xa6\xd8;\xd5\xc6\xcdk+\x02\xc0\xa7{.\xcfF\xf9\x06\xa9qK+_C\xea\xf6eOT\xc6^\xd2\x9e\x82\x84\xb8W\xea\xb4e\xaf\xc4m\xdc\x8d\x95\xb3>\xf6\xf5 \x89\xcb\x97\x90R*\\\x9c\x12\xc1?\xe7\xaat)\x07\xaf\x12\xf6-\xca\xbc\x87C\xfa\xd3\x94_k5H\xbf\x01\xa96\xac\x1f\xe1V\x90\x1ecar\x80\x94_\xe3\xae\x89\xbaRn\xee\xde\x871Hg!\xc5\xb3(\xa1 \xae\xf1I\x7f\xd7\xaf\x90\xd2\x97\xd0\x19rb\xed\xd3\xc0e\x14\x0cR\x98\x1e\x86\x14\x1f\xf2Q\xa7s\xb9\xa6\xdc\x11\x9a\xa3k\xd9\xfc\xb2\x00I\nJ\x1fy(\xd4\xbd\x02\x0e\xd2\xe9HU\xea\xe5X\xb5\xc0:\xc6\x9a\xc4/T!\xfel\xf47\x84<\rR\x17\xb0\t\xf1g\xc3 \xc9\xe9\xd3\xab\x92\tk)\xf1\'\xd9k\xe1\x8e\x00N\x8b\xbc\xb1\xd2Sc\x85\xac\xb5\xbc\xa4s\x90\x8eF\xa2|\xd6\x90\xc9\xd3\x0c\xbcV$\xca\xeb\xb2P\x0cW\x82(\xd8\xe9\x1e$\x9d\x9d\x87\xe4\xc2B\xd6\xf5\xdfu$\x03s\x94C_\xc4x\x92E\xdf~\xdf2\xeb\x8e\xd9\x1c\x83\x94\x0c\x8eB\xaa\xfaD\xbdm\xe6\xb2\x89\xb4,\x9d2n\x89\xa2`W*\x98!\x0eq\x06)>\x9f\x87\x94\xadX\xad\xbdk}\xd3\xb5\x1f\x1c\xbe\x8cQ<]E\x85\xb8/\xef5\xe4e\x86\x19\xa4\xdf\x80$\xe7\xb5\xc8]4\x93*\x13u\r\xac\xc1\x92W\xbe\xc2\xcf\xad\xe7\xe3\x0eR|>\x12\xc9f6\xff\xea\x83\xd6\xd3\x11\x16\x11\x17\xd5\x03y\xbe\xd7\x89T\x1e.\xfe\xab\x91*\xbeA:\x15\x89THW\xed\xe1\xefl\x98}i\xba\xba\xa5\x1f7W\xd5\x06\xe9q\xfd\x00\xa4\xb4-\xbdP\x85\xc8\xe6\x90\xa5\xf8\x9a\x98r\xf8YeI\xd8u\xbdtg\x90~\x03R\xb5\x93n\xdd+]\xbd\xfd\xad[,e\x18/}\xed\x948\xaa\xe6v\x95\xfc\x83d\xc6\xf7\x91\x10\rr\x9c\xfa\xf8r/xK#X\x92\x15\t\xcau\x10g\x10\x9a\x1c\x07\xe9t\xa4\xc2\xe1\x9d4d!\x9a}/I0\xf8\xe5\xab{\xa1\xfd,n\x90\xbc\xc5\xf7\x91\xd6\xa5\x072\xd0\x0b2\x1a\xe6&d\xdf;\x82\x17\xc3\xf2\xb99\x9b\xa7;\xaa\x03\r\x89\x07\xe9p$\xbb\x1cS\xf4\xae\xd9\xb2\x1c\xb1$\xdcg\xa1\x07\xb2\x84\xaa!\xf32\x19;\xbbA\xa2\xe0\xc5\xf8,R\xea\x05\xb0qJ\x8d\xab\xb0\xf5\x12\xd5\x02\xd9\xaeo4?l\r\\\x84A\xaa\x03\x1e\x81\xc4"\xd9\'\xf7V\x11^Z.\xa7\x8d\x86\x9a\xf9U)\xca\x8cl_\xea\xc7\xed\x9a\xa2\r\xd2\xf9H\xad\x87b\x90\xb5z\xfa\x9ekZ\x00\xfei\xc5\xe1\xac\xaa\xbf\x94\xfa<\x06\xc9|\xff\x18\x12E\x04\x05\xf0\xa1\x0b)\x958\xfe\xde\xb3U6~<\xff}\r\xd2\x93\xc2O"\x05\xfd\xed;b\xebq/\xa4\x17\x16\xb0\x9er\xfa\x91\x8d\xc0\x86^\xc3\xaa\xab\x89\x99E\x0c\xd2\xc9H\xbd\xfe:|\x1b\x84\xde\xa2\x8bQ\xda\xb2!\xb8\xeed\x97j\x9fl+\xb9\x83dV\xbf\x8a\x14\x16\xc0\xc6\xa5xd\xdf\xba\x06X\xaa\xfa\x93\xee\n\xa0\x0e\x10K\x17t\x90\xc8\x987\x8f@*]\x7fd\x98\xa6\xab\x9e\xf8.\xad\x1a\xedJw~v\xcf\r\xb1Dw\xcd\x14\x0c\xeb\x1f!\r\xd2yHev\x11\xa3\x9dV\xc8\x87\x9fs\x9f5\xbd[\x04\xb3\xbb\xd6`\x90\xd4\xf1<\xa4{\x9b\x8f\xe2\xbb5\x10\x16\x7f\'\xfb\xcap\x87\xb9$/\x1b\x90\t\xf5^\xb0\x1f\xa4v\xfd[H0\x17\xa4\xa8\xa1l\x88v\x1c;F\xe0\x1d\xa3\xb1\xa8M\x92\xfaR\xc3\xc8E\x84A\xa2\x87#\x91\xb6w\n\xe9k\x02^u3\x84/R \n\xd1\xd7B\xa2\xab\xcd \x15BM\xaa\xc2\xf2\xdf!i/\x99\x10\xd8\xdc\xec\xb0\x8bQ\xeeW\x1b\xa2\x85\xfa\xde]\xe2&\xde }\x19)\xee\xae_\xbe\x11\x97\xcb\xea%\xef\x9c7\xde\xbaq\xae\x81@yBW\xc4\xde\xab\x92u\xf8\x83t>\x92\x1a\x19\x91$b\xe9\xdc\t/\x07\xdeU\xd0\x06\x91z\xa8\x8d\xb9\x11L\x8cA\xf2j\xec\xd6\xbfE\xcaG\x98\xcf\xba\xcbm\xcf\xb1(C\xf1d\x87vb\x9c\x89x\xce\to?H\x9c\xff$$\x8e\xc7K\x94\x0b\xe9)MU\xb6\x85\xaf\xb3\x06#\xdfLn\xc5\xf2\x0f\x92Ks\x1a\xd2\xe30\xc4\x05\x85\x1es*\t\xb4/\xed\\\xd9\xccK\x9b"\xcb\xce\x18\xa4:\xd9\x17\x90bk\xe5\xb3\x1a\x9ezo\xd2o\xf7\x1f\x9a\xc8\t\x05\xd9X\xdd^\xc55HV\xf2\xeb\xf1[Hu"\xa4\x18\xd4\x02\xb8\xf7\x11LQ\x95\x00\xc1/\xeet?\x8c\xc9Y+y`\x97A\xfa\x1dHi\xa3\x8e\xff\xc6x\x0e\xe2\x9b\x81jX9:B\xb6\x1f\xa4\xc7\xf1m$\xb4\xf3\xd24>J\x83\x04\xf7\xca\xe7~0\xe2\x11fp\xcb\xdcD\xd4A\x83\xe4\x1eOC\x92\x07\x15\xc1a\x93\x97\xd3\xda\x88L\xe9\xd9\xa4$\x08\x89A\x0b\xdc\x85\x14\xd0\xe5\x1a$?>\x8d\xe4\xfa\x05\xbc.\xa1\xca\xbc\xda\x86L!\x1f\x07i\x14\x9f\xdb?\x9a1H\xc9\xe5H\xa4\xb2\xbd\x92\xcd+\x8d\xa6K\xdb\xa46\xa1\x9b\xf8U\xd6\xe0\x86d*\xcd\x14EQ\x9d\x07\xe9l$\xa6\xfb\xf9Y \xa2\x8f\xa63\x9f\x04y]\xaa\x9aW\x10\x17U\xb3\xcb\xd15\x93\xe9\xf5A:\x13\xe9\xaf\xed\xe7s\xdf\xda[\x13\xd7\x0cMBA\x7f\xd6\xbba2H\x1fB\xe2\x8e\x91^\xb9\xef\xceu\x89\xe6 9M\x8eT\xd3y\xb5\xb1\x97\x84\xe1a\x95zo\x90R\x9c\xe3\x90R \xc4\xad^\x0b\x9dj\x06\xd5m)\xdbk\xe7v\xadz\x89\xaa\x1c\x83\xc1D\x1f\xa4_\x83\xf4\xf6\x10\t\xdbn\xd0i\x11=\xdb\xe8\xc4\tx\xa3u}\xd2A\xfa(\x12]\xbd\xee\xb7_\xcc9^\xbe\xe9`s\xc0\'\x0064+\xd2\xfa\x16\xb0\xb2\x19\xa4#\x91\xd2\x95Md\xf1\xae\x94\x00\xc5{rd\x83\xe2~E\xfejuS!\xbc\x8d\x1b\x83\x14\x1dOE\xda\x1e\xda_\xff!\xc2z\xad\x90[4\x86\xb5\xbfx&3j\xee\x14\xfb\rAv\xfeV\x84A\xd2|\xef!\xd9\xa7\xd7\xc7\x8e\xdc*\xd0\xfc\xdaZE#q\x1eGW\xc9zo\x0c\xd2\xd9H\xe9|\x979\xea\x03-.`+\xc3\xad\x15\xb8mAJ\x9cG\xcc\x93\x82"M\x06\xe9T$\xdbA\xc5\xd89\xd6\xa5\r\xa4\x02bZ\xf8\x06\x9d\xb8\x1b\xb4\xf9Q\xe2 =\x8e\x03\x90\xda\x08\xce^\x9e\xe2\xf2\xff\xf2!H\xe6\x92\xf9\xcc\x1aq\xa7|\xbbV\x83\x94\x97OA\n?>\xde\xc8\xc5O\xb5ogE\xa5\xc8\xb3`\xc2M\xbf\xea\x1d\xcc\xf9\xfb =\x8a\xdd\xb3\xfa\x97Hm\xd3\x90\x05\xf2d\xbf7\xedJ\xd1\x94\x92&t\xa0\xcd\x88\xf0G\n3H\xa7"\x89)l\x0cg\xb9\x96 +\xd5\xb3\xc4\xd9\xacK\x0e\xb7Q\xd2A\x12\xe7\xc3\x90\xd2[n\xd0\x96\\\xa5^\xe8\xeb9\x0b\x851r\x9e\xa8\xb2\x84\xba\xda\xde\xa7\xa7\x90}\x90\na\x07!\xed\x0e\xc4/w2\xed1\xeeK\xe3\x96\xc3ES\xe4\xff%\x86\xd1\x8fT\xfa\xb7\xb0\x06I\xe5|\x14)G\xb6\xccz\xd8\xf7\xea\xd1X\xed\x17T\xaa\xb4h\xa1\x16\xbc0Ho\xa9\xd9\xdfj,7\x90^g\xb8L\x00\x9a\xb0!u\xd6\xaa\tB\xfe\xe0\x0b\x89R\t\xc4\xd2\x85\xb4o\xfd!.\x83t2\x92U\xdf\xcc\xaf\x94\xc7\xe7\xf0\x83k#\xd5\x10\x81}\x98\xad\xbc\x83t*\x92\xfb\xed\x9aFe\x1f\x01\xe1O\xdc\xe8x]UH\x12\xb2\xb5\x83B\x9a\x0f\x92Y:\x0c\xa9\xb4]\xf2\xb04j\xb0\xa5\xda\x96\x03F\x9f\x81\xae?Eg\xc7\x9c\x98`ky\x83t$\x92\xb4S\xd7F\xa6\x05w\x86\xd8\xb7\x01~D?\xdah$\xd3U\x83\xb4=>\x8c\x94O\xb8\xd8\x99\x9b3\x19\xda>\x0c\x8a\xc0\xc1\x92\x1aNj2=\x96\xcf\xff\x15\x0cR\xe7\xfae$\xb9\xfb\xa2\x12w\x9c\xd7u\xda\x14\xc1\x88x\x12_\xb4oS\xe5\xbc\x8f\xaa\x01\x07\xe9H\xa4\x8d\x83\xfa\x14\xfe?\x08\xb5\x0bA]\x12\x86l\xa4?\x8b\xa9\x02>\x8dAj\xcc\xfe=\xd2\xd6\x80{\x8am\xa5-\x17\xdf.\xe16\x7f\xd0P\xec<\x17\xb0\x90\xd1\x8cA\xfa.R<\x98\xe9\xa0\xf2\x89\xcd\x0f6I\xef\xc2\x0b\xb8\xb2*\x92\xb2\xfe\x8f\x1e\xf9\xf7\xc8\xfc\x18\xa4R*\xc7\xaa\xec>\x80d\x94\xd0\x0c\xd9\xaa\x8c\xb5\x91\xc9\xa6\xbbX:\xc50\xf6d\xa8\x99\x07\xa9\x95z\x00\x12\xf2f\\\xa6Sl\xea\xe0\xbc\x92@\x84Gm\x8d\x1d~\x1d\x168>\x0eRm\x11\x0c\xbe\x8c\x14\x16\xf90F%l\x1cL@\xc0E\x91\n\x11\xf9_\r\xaa\x13\xb5\xb2{\x8d\xe2\x9f\x07\xe97 e\xf7\x8d\xf3mLJ/\xbb\xf1\xd0S\xf9cs5\xa0\xae\xe4\x9a\xe6\xb0\x83\xd4.5\x1b\x1fB\xe25\xf3n\x19k\xf9*\xc2`m$\xdd\x9b\x9dUomT\xda\x19\r\x92\x0br\x02R{1\xba\x83\xdc\xc8\xf1=f\xb9\xb4i\xc3%\x9dKgt\xe8\x0f\x043\xfd 5\x0c\x87 \x91My\x1b\x96\x07\x1b\xa1\x81*_\n\x1d\xf4\xc4\xb4\xce\x1fW]\t\xf9\xcb\xb9,\xf6 ]g"\xd5"\x8a\xcd\xfb\xa8\x93\x10\xf7\x1e\xfe\x99\xf4\xb2\xb0o\x0c\xdf\xc1o\xd9\x0f\xd2n\x92\xbf\x89\x14\xe3\xdd:\xf9\x90\xdeweY\x13<=\xd0w{\xf3\xb2\xceu\xad#\xea[\xe1\x91\x1c\xa2\xbcA:\x1b\xc9\x1e\xf6x\xae\xfb\xe3mw][\x84\xa2\xc5]\x91\x00^mR\xd0\x83/\x9d\xd14H\xec\xcek\x1f@JS\x94\x84|\xf2s\x1e\x17!\xa9\xeb\xebR\x0c\x89\xb5\xe7T\t\x1a\xa4Z\xc6w\x90\xca\xa4\xf2;\\\xfdg\x83I\x80\x89\x87\\\x9c\xea\x1f\x04m\xc2e\x1f\x1e\x82\xa2[eV3H\x07#\xd9\xa8O\x07\x97$U\x81\xba8\xa1gqe\xd4\xab*\x89\n\xb01\x07)G<\x13)\x88\x03m\xa7\xe3Z\xd5\xa0hH\x90\xc3S\x91\x8a\x88\xbcb\xc3P-\xa2\x96A\xd2\xc7S\x90\xb2&\xa3\xcc\x06\x07\x89\xce/;\xc0\xe6N\r\x9ab!\x85~\x84\xa2\xbdAJ9\x0fE\xdaY\xcd;o\xf4Er\xf8\xd1f\x1a\xf7\x82\xc1R\x9b5y\x85q\xa2\xca\xbf\x86JWk\xd3\xbb\x0e\xd2\x1f!\xd1n\x0eF\x00\xbe=L\xf2\xd4`\xa5\x99)O\xf5\n\xba\xb2\xb6c\x90\xcc\xfc,\xa4\xac\xfeN\x83k\x8f3\xe8b\xfb$1vB\xea.\xb2s\t\xa40\xc9\xfd\x15\x1f\xf7\xda \xfd\x06\xa4\x9d\xe1\xdf\x19\x99\x06\xeac\x96\x8e\xbe)\xc1\xc8\x17W\xa6J\xb01\x06\xa9\x0eS8\xfee$\x8d\xb8Z*\xde\xee\xbeSx\xa9\x04\xda*\xa0c\xa6~O\xdbj\x1f\x01te\x90\x1e\x94\x7f\x12\xa9\x9c\xed\xe6\x0f\xf3p\xdc\xdb\xf7\xfe\xf5}[v$^\xad%-eV\xf3\xc3 \xe5\xf9IHE\x02\x93h5Z\xfej\x00\xefy\x05\x7f\xb7\xeb\xfd\x8d\xe4\xeehj\xd6\x07)\x0b;\n\xa9h)\xc9^\xed. \xb0OE\xf9F\xbf\xb2\x83\xd5\xc2\x8b\x83\xa4\xb6\xe7!\x15&\x90un\x02\xe3,{/2\xa1\x15\xb7\xdc\x9b\xabg/S\x1e\xbd\x01l\x8d\x06\xe9t$\xf8M\xcd\xcd\xaa\x9a\x9e\xf0[r\xea\xc1k};d\rjK-=H\xb5\xeef\xebcH\xa5\x90x\xc8\x1b\xf9\x85\xbaX\x00\xe3\xdd\x06t,\xd6lG\x16?\x0eR\x8c\xf3=$\xack\xd3FI\x87\xf8\xf5\xb6%\xfe\xd4/\xf9:WnS\xa3DD\xf0\x8f\x19E\x1eY\xb2\xc1 \x1d\x8f\xc4\xb1\x93\x8e\x87\xe1\x8cPm\xfc\xacg|\xb0m\xd9\x1d\xc9\x96\xad\x96h\xf5\x1f\xa4&{\xe5\xf0\xef\x91\x10=$p8\xa8\x11\x15\xb6 \x9a\x8f[\xb6S\x9d\xdaC7\xca\xea\x15\xf9\x07\xe9p$\n\xe52[\x89aae\x84\xdd\xcbk\xb8=\\\r\xd3B\x9dNV\xee\x82\x93\x90A\xba\xceEr\xa3\xdeq[\xe6\x14\xa7\xa52\x1a.\xa9b\xae\xa4\x94\nl\xd7(-Enl\rR\xb6\xfe\xd7H\xab\x9dTH\xee\x19\xd3=9o\xd4\xda\x1a\xe9\xe3v\xe5\xbb\x80ay\x90\xda\xe0\xdfB\xa2/l\x84\x85g\x8d\x1en\xd0\x1f\xf7\x9fwZ\xde\xe2\x0e`#cY\xb5*m\x1f\x0e\xd2\x99H\x7f\xab\x1dmK\x94n[}(\xb3h\x83;\x90\xbb\x0e\x1e\x14\xb4\xda4\xc2 uQ\xff#\x92\x0f\x18\x02\x81\xf7\xb4\x0f\x83\x8f\xcbOBL"\x9d6K\x1b[\xdep\x90^\xf3#\x90\xe2\r\xaaW\xa4\xbd4\xbdp\xa49\x96\x19\x8c\x9d&\xb1E\xe4\xc8\xe0\t\xb5\xd3+\xd2 ]\xc7#\x89\x1c\x17\xf4\xf2\x18.\x945@\x91\xcd4\x14+\xa5\x82\x87\x86\xcc5\xbc\xa8 \x83$vg!!z\xb5z\xbcn\xf0Sf\xd7^22\xda\x90\x9dw$\x14\x11&\xd2 E\xdb\xef"%\x0b\xfeM?j\x00\xc4i\xb4\xf4o\x85\x90\xd1._<\xc2_\x85|\xa5\xa9\xbb>\xcb\xf3?\xcb\x1c\xa4\xb3\x91\n%f\xd3\xcf[\xc3\xb0\x94\xa0rU\x1eF\xfc\xb0\x00\xbc\xb5\xe9[lnF\x1a\xa4\xbf\x89\x04k\x05J\xde\xb1\xe4\xae\x83q\xa9\x0ex9(\x82\td\xae\x81\xa4e\x90NG\xd2Hb\x1d\x1fV\x92p\xe5\xea!\x97\xdcX^\xa5\x1e[+\xc1J\xc6\x8f\xad=HG#\xd9S\xaf\x8b\xcd\xe9\xf7CK\x12\xe7D\x9bq{\x81\xc5\xae\xb3\x18\xa4\xa7\xf1\x1d\xa4Jf\'\x9f_\xdd\x86\xb5\xf0\xda\xd1d\xef\x8e\x7f\x00J\xbd\x89\n\xb3\xd4;H\xd7\xad\x9b\xcc\x0eB\xa2p\xb8H\xee-T\xe2u\x89\x18J\x9a\xca\xfd\\\xb1\x82\xed\x07\xcc\xec\x1a$\x8ep \x92\xce\xb4S\xa2\x16\x8d\xb6\x95\xbf4\xb2] K\xb1<\x88\x8dF\x00\xba\x92\x83\x0eR;>\x89Td3-\xb5V\xfc\xb1\xe7\xa6\xd9a\xf6&i\xf5V\xb9\xdf`\x83t>\xd2\xeb2\x95\xab\xd5\x04\x01\x01\xac\xa9\xdc\xd2\x17\xd7\x02j\'Qs\xb3\xa6\x04b\x8f\xe0@\x96\x83\xf4\x1b\x90L\x02\xbb\xe4m\x0bk\xdf\x19\xd1\xcb\xc4\xb40\xa6\xaav\x07M\xb3\r\x92\xb7\xfe&\x92\x0b\x83\x95\x15\xd6\xbd\xe8\x1c\xb5\x89\xff\xd0\x1by\xcf\xc3SV6\xb5\xcf \x9d\x86\xf4\x9c*G\x85G\x88\x92\xab\x1f\t\xea\x1ci\x8e\x14\xc6}\x18\xc0\xcf\xf4o\x8e\xc4\xae\xc6 \x1d\x81\x14]-[w\xa0\xdf\xe8\x8e\x98,\xc2P\x17RD)\x96\x95Z\x15a\x90\x8a\x95r|\x10\xc9\x08\xd3#\xea\x04R-r\xabu\xden+\x03o\x08\xb8\x18"\x07\x1f\xa4\x9f\xcd\x83\x91\xee/\xa0\xe3\xba\x96\xc2\x03\xfb\xdb\xa8\xd1\xbe\xb2)zT\xcb\x8b\xbcY\xbd\xe9\x92 \x83t2\xd2\xd3y5\xa9\xde\xfa\xf4\x89\x93\xc6\x9e\xa1X \xf3\xfc\xc0\x95Y\xa5\xe7\x08\x83\xc4A\xde\x18\x1fC\x8aS\xeb\xe2\xf3du\xe0\xd5\x14\x93(.q\xf3)\xec\x88J\x0bB5lC\x0f\xd2\xf5\x1d$\xfe\\\x05\xc9/\xdc\xc3\xaf\xdes\xfc\x9277j\xfe\x8e\xa7\x87\x1c\x0b\xabTH\x1b+\x95o\xd0A:\x1a\x89\xc5\xbc=\xb4\xa5\xda\xd0j\xe4>R\x84 lI\xb45y\x7f\x0c\xd2\x07\x90D\x0c$z\xf2\xa0\x90\xe0\x19\xbf~|\x80\x8d\xa4\x10!v\x9e\x175\xed \xfd\n$\x12\x1f\xf4\xb0\xda\xc4\x86\xb0\x0c\x07J\x95p\xeb\x85\xde\'~\x1bYE\x0f\xd2\xe9Hu\x88"O\xe3\xf0\xdc4?\\w\x1f\xa8\xaa\xb0\xb8J\x87\xbc\rq\xd9\x94Q\x18\r\x12\xef|\x00i\x85\t\x8d\xa4\xc7\x1e\xf4U\xaeMNc\xf1J\xe6\xe7\x1e+\xbcR\r\xb2\xef \x9d\x8cd\x0fsz^\xf2\xd8\x1dW\xc6\xdf8\xe4i\x87:\xe4\xe2\x97\x1eR\xc8\xd4}2\xe1\xef\x83t.R\xd7\x0f[\xa7\xb9\x94{? \xa2G\xad0\xf6\x17\xc9\xbe\r\xd0Y\xb8\xb0V\xce Y\xa7/ \x19\'\xc7\xf1tJ\xb98\xd6\xde\r\x91K\xbb)\x10\x19\xf3\xac\xae\xc3 \xbd\xa6\x87!U\x99\xe4\xbd\x10\xc2\xff\x1a\n\xe1\x0fgu\x0b\x8d\x12\xd8ipyM\xe0\xa5\x14\x11\x07\xe9\x18$\xfa`\x10\x1c\xa3V\xd7.\xaf\x1d\xe4DIG4^FH\xfe\x8fyL\xe2A\xda[\xbe\xbe\x88d\xbd\xf8\xa0\xd2\xa9\'\x89^C!C:\xe3\xb9\x80\xd8\x06j\x14\x0c\xd2YH \x17\xb0\xfc\xbd\xf0\xadP\xeb\x83f.mE\xa1b\x97\xc2\x19\x0c\xd2\xf1H\xc5\x83\x1b\xc6\xa0\x13\x7f\x9f\xeb\xfb\x19\xd9\xc8\x94\xa1\xd6@\x99\xb4\x08\x8f\x85\xae\xa2\xf6\x89\x06I#\xfd\r$\x7f\xf4Z:(\x89\x15\xd0/<\x0c\xf3\x9a\xc6\x864\x1d9H?\x9bG#\x99\xc7\xdb4\x10\x16Ww\x08\x1b:\x05\xf7V\xf1vK\x05 -\x9b\x9b\xfb\xe5\x0bg\xe2+<H\x87#\xc5\xae2\xc71\xc3\xfa\xb3\xebf:\x96\xea\x08\xcd\xa5\xab\xbc\xca\xb5,)b\x0c\xd2u2R\x1b\xa1\x96\x88\xbc/\xaf\rh\xf7i\xa4\xaa\xbcb7b\xaay\x1b\xfa\xc1z\x90\x9e\xc6\xdfCz\xf9\xa3\xb1C<\xf2\xe6#\x1cY\x08s$\xb3;\xd7\n\x89\xa2\x1aY\xc5sm \xfa\x06\xe9d$\xeb\x1d\xe3\xbc\xd1\x86{\x96{ATY,\xf1\xbd\x90\x8b \xa1\x07i_\xd1\xf6Ve\xf5.Ra@\x99\x91\xbf#\xff\x7fi\xe4\xfc\x0c\x13\x83\xe6\xa4\x87\xdc\xf6\xaby\r\xd2\xef@\x12\x07\xf0\xd6\xd2\x0cg\x11\xb2\x16u\x90\xc5\xacR\x1dk\xcf(#\xba\xbf4\xfa\xbf\x92A\x8a\xc9\x0eB\xb2\xce\x9dA=\xa4L\xdcd\xce6h+\x03r`\x08]\xabv\x90\x9c\x82/"\xe5F\xa9\xcfp$t=\x98\xa7\xe05\xb5\xea\x06\xb9\xe3\xe2\x99\xcbf\x92\x0f\x92F\xb6Qm\xa8\xa7\xf1gH\xce\xf0e\x05\xa7._\xc09(<n\xaeV{\xcf\x16VMCF\xdf\x9a}\x90ND\xd2\xdd\xe7Ag\xb6\xc9e\xc4\xdd\x05\xfb\xa1(J\x81\xe6)\xd6{W\xec\x9e\xd5 }\x12\xa9\xb2\x0f\xcdTG\x90\xe5\x97n\xd3b\x8f\xbeo\xdbT]7H\x0f)\xbf\x8a\x84\xcc\xa57\xb4z\xe1\x96\x9c\xdd\xd9\x88gb\x8bd\x91*P\x06\xb1.\xb9\x82\x83\xf4\x1b\x90\xde\x1d\x95\x97)Pm\xa8\x85\x0b\x14H\xdf#8\xe2zu)\xbc?\x06\xc9\x1b\xfek$\\wO\xe0\xba$Rs\xa0C~\r\xbf\xce\xf7_9\xe4oE\x18\xa4\xecz&\xd2C\xac+\x93^W\xc0W\x9b\x88hT\xdcVZ\'j-\xd7i\xe1\x1b\xa4\xd46\x8e\x84 !\xe1q\x90\xd4\xea\xc3H\xa1\x8bz\xb6.\x88\xb3\xe2\x96\x03\xef\xc0\xb1d\xad\xb9\xbf\x88\xacT2H\xe7!i[\xb0\x9f\x99<\xf4"\xdb\xecAK\xd2\xb7\xdd\x9a\x8c\x83\xd4G\xfd<R\x8c\x92\xae\xe7|\x8eM\x12\xf0\xf4u=k\x15B\xf4\xb0\x94\x03\xc8\xf6\x93\xda\xfb\xfb\xfd\xc5\xb7\xfe \x1d\x8cd\x03\xf8\xa8\xe2\x87\xda\xd6z\xe7\xe4`\x10\x01\xbdK\xb5&\xc1/\x97\xcd\xd6\xb3\x12\xefW\x07\xe9cH\xd2\x14{\xa7\xda\xb8ymE\x00\xf8t\xcf\xe5\xd9(\xdf 5ni\xe5kH\xdd\xbe\xec\x89\xca\xd8K\xdaS\x90\x10\xf7J\x9d\xb6\xec\x95\xb8\x8d\xbb\xb1r\xd6\xc7\xbe\x1e$q\xf9\x12RJ\x85\x8bS"\xf8\xe7\\\x95.\xe5\xe0U\xc2\xbeE\x99\xf7pH\x7f\x9a\xf2k\xad\x06\xe97 \xd5\x86\xf5#\xdc\n\xd2c,L\x0e\x90\xf2k\xdc5QW\xca\xcd\xdd\xfb0\x06\xe9,\xa4x\x16%\x14\xc45>\xe9\xef\xfa\x15R\xfa\x12:CN\xac}\x1a\xb8\x8c\x82A\n\xd3\xc3\x90\xe2C>\xeat.\xd7\x94;Bst-\x9b_\x16 IA\xe9#\x0f\x85\xbaW\xc0A:\x1d\xa9J\xbd\x1c\xab\x16X\xc7X\x93\xf8\x85*\xc4\x9f\x8d\xfe\x86\x90\xa7A\xea\x026!\xfel\x18$9}zU2a-%\xfe${-\xdc\x11\xc0i\x917Vzj\xac\x90\xb5\x96\x97t\x0e\xd2\xd1H\x94\xcf\x1a2y\x9a\x81\xd7\x8aDy]\x16\x8a\xe1J\x10\x05;\xdd\x83\xa4\xb3\xf3\x90\\X\xc8\xba\xfe\xbb\x8ed`\x8er\xe8\x8b\x18O\xb2\xe8\xdb\xef[f\xdd1\x9bc\x90\x92\xc1QHU\x9f\xa8\xb7\xcd\\6\x91\x96\xa5S\xc6-Q\x14\xecJ\x053\xc4!\xce \xc5\xe7\xf3\x90\xb2\x15\xab\xb5w\xado\xba\xf6\x83\xc3\x971\x8a\xa7\xab\xa8\x10\xf7\xe5\xbd\x86\xbc\xcc0\x83\xf4\x1b\x90\xe4\xbc\x16\xb9\x8bfRe\xa2\xae\x815X\xf2\xcaW\xf8\xb9\xf5|\xdcA\x8a\xcfG"\xd9\xcc\xe6_}\xd0z:\xc2"\xe2\xa2z \xcf\xf7:\x91\xca\xc3\xc5\x7f5R\xc57H\xa7"\x91\n\xe9\xaa=\xfc\x9d\r\xb3/MW\xb7\xf4\xe3\xe6\xaa\xda =\xae\x1f\x80\x94\xb6\xa5\x17\xaa\x10\xd9\x1c\xb2\x14_\x13S\x0e?\xab,\t\xbb\xae\x97\xee\x0c\xd2o@\xaav\xd2\xad{\xa5\xab\xb7\xbfu\x8b\xa5\x0c\xe3\xa5\xaf\x9d\x12G\xd5\xdc\xae\x92\x7f\x90\xcc\xf8>\x12\xa2A\x8eS\x1f_\xee\x05oi\x04K\xb2"A\xb9\x0e\xe2\x0cB\x93\xe3 \x9d\x8eT8\xbc\x93\x86,D\xb3\xef%\t\x06\xbf|u/\xb4\x9f\xc5\r\x92\xb7\xf8>\xd2\xba\xf4@\x06zAF\xc3\xdc\x84\xec{G\xf0bX>7g\xf3tGu\xa0!\xf1 \x1d\x8ed\x97c\x8a\xde5[\x96#\x96\x84\xfb,\xf4@\x96P5d^&cg7H\x14\xbc\x18\x9fEJ\xbd\x006N\xa9q\x15\xb6^\xa2Z \xdb\xf5\x8d\xe6\x87\xad\x81\x8b0Hu\xc0#\x90X$\xfb\xe4\xde*\xc2K\xcb\xe5\xb4\xd1P3\xbf*E\x99\x91\xedK\xfd\xb8]S\xb4A:\x1f\xa9\xf5P\x0c\xb2VO\xdfsM\x0b\xc0?\xad8\x9cU\xf5\x97R\x9f\xc7 \x99\xef\x1fC\xa2\x88\xa0\x00>t!\xa5\x12\xc7\xdf{\xb6\xca\xc6\x8f\xe7\xbf\xafAzR\xf8I\xa4\xa0\xbf}Gl=\xee\x85\xf4\xc2\x02\xd6SN?\xb2\x11\xd8\xd0kXu51\xb3\x88A:\x19\xa9\xd7_\x87o\x83\xd0[t1J[6\x04\xd7\x9d\xecR\xed\x93m%w\x90\xcc\xeaW\x91\xc2\x02\xd8\xb8\x14\x8f\xec[\xd7\x00KU\x7f\xd2]\x01\xd4\x01b\xe9\x82\x0e\x12\x19\xf3\xe6\x11H\xa5\xeb\x8f\x0c\xd3t\xd5\x13\xdf\xa5U\xa3]\xe9\xce\xcf\xee\xb9!\x96\xe8\xae\x99\x82a\xfd#\xa4A:\x0f\xa9\xcc.b\xb4\xd3\n\xf9\xf0s\xee\xb3\xa6w\x8b`v\xd7\x1a\x0c\x92:\x9e\x87to\xf3Q|\xb7\x06\xc2\xe2\xefd_\x19\xee0\x97\xe4e\x032\xa1\xde\x0b\xf6\x83\xd4\xae\x7f\x0b\t\xe6\x82\x145\x94\r\xd1\x8ec\xc7\x08\xbcc4\x16\xb5IR_j\x18\xb9\x880H\xf4p$\xd2\xf6N!}M\xc0\xabn\x86\xf0E\nD!\xfaZHt\xb5\x19\xa4B\xa8IUX\xfe;$\xed%\x13\x02\x9b\x9b\x1dv1\xca\xfdjC\xb4P\xdf\xbbK\xdc\xc4\x1b\xa4/#\xc5\xdd\xf5\xcb7\xe2rY\xbd\xe4\x9d\xf3\xc6[7\xce5\x10(O\xe8\x8a\xd8{U\xb2\x0e\x7f\x90\xceGR##\x92D,\x9d;\xe1\xe5\xc0\xbb\n\xda R\x0f\xb517\x82\x891H^\x8d\xdd\xfa\xb7H\xf9\x08\xf3Yw\xb9\xed9\x16e(\x9e\xec\xd0N\x8c3\x11\xcf9\xe1\xed\x07\x89\xf3\x9f\x84\xc4\xf1x\x89r!=\xa5\xa9\xca\xb6\xf0u\xd6`\xe4\x9b\xc9\xadX\xfeAriNCz\x1c\x86\xb8\xa0\xd0cN%\x81\xf6\xa5\x9d+\x9byiSd\xd9\x19\x83T\'\xfb\x02Rl\xad|V\xc3S\xefM\xfa\xed\xfeC\x139\xa1 \x1b\xab\xdb\xab\xb8\x06\xc9J~=~\x0b\xa9N\x84\x14\x83Z\x00\xf7>\x82)\xaa\x12 \xf8\xc5\x9d\xee\x8719k%\x0f\xec2H\xbf\x03)m\xd4\xf1\xdf\x18\xcfA|3P\r+GG\xc8\xf6\x83\xf48\xbe\x8d\x84v^\x9a\xc6Gi\x90\xe0^\xf9\xdc\x0fF<\xc2\x0cn\x99\x9b\x88:h\x90\xdc\xe3iH\xf2\xa0"8l\xf2rZ\x1b\x91)=\x9b\x94\x04!1h\x81\xbb\x90\x02\xba\\\x83\xe4\xc7\xa7\x91\\\xbf\x80\xd7%T\x99W\xdb\x90)\xe4\xe3 \x8d\xe2s\xfbG3\x06)\xb9\x1c\x89T\xb6W\xb2y\xa5\xd1ti\x9b\xd4&t\x13\xbf\xca\x1a\xdc\x90L\xa5\x99\xa2(\xaa\xf3 \x9d\x8d\xc4t??\x0bD\xf4\xd1t\xe6\x93 \xafKU\xf3\n\xe2\xa2jv9\xbaf2\xbd>Hg"\xfd\xb5\xfd|\xee[{k\xe2\x9a\xa1I(\xe8\xcfz7L\x06\xe9CH\xdc1\xd2+\xf7\xdd\xb9.\xd1\x1c$\xa7\xc9\x91j:\xaf6\xf6\x920<\xacR\xef\rR\x8as\x1cR\n\x84\xb8\xd5k\xa1S\xcd\xa0\xba-e{\xed\xdc\xaeU/Q\x95c0\x98\xe8\x83\xf4k\x90\xde\x1e"a\xdb\r:-\xa2g\x1b\x9d8\x01o\xb4\xaeO:H\x1fE\xa2\xab\xd7\xfd\xf6\x8b9\xc7\xcb7\x1dl\x0e\xf8\x04\xc0\x86fEZ\xdf\x02V6\x83t$R\xba\xb2\x89,\xde\x95\x12\xa0xO\x8elP\xdc\xaf\xc8_\xadn*\x84\xb7qc\x90\xa2\xe3\xa9H\xdbC\xfb\xeb?DX\xaf\x15r\x8b\xc6\xb0\xf6\x17\xcfdF\xcd\x9db\xbf!\xc8\xce\xdf\x8a0H\x9a\xef=$\xfb\xf4\xfa\xd8\x91[\x05\x9a_[\xabh$\xce\xe3\xe8*Y\xef\x8dA:\x1b)\x9d\xef2G}\xa0\xc5\x05le\xb8\xb5\x02\xb7-H\x89\xf3\x88yRP\xa4\xc9 \x9d\x8ad;\xa8\x18;\xc7\xba\xb4\x81T@L\x0b\xdf\xa0\x13w\x836?J\x1c\xa4\xc7q\x00R\x1b\xc1\xd9\xcbS\\\xfe_>\x04\xc9\\2\x9fY#\xee\x94o\xd7j\x90\xf2\xf2)H\xe1\xc7\xc7\x1b\xb9\xf8\xa9\xf6\xed\xac\xa8\x14y\x16L\xb8\xe9W\xbd\x839\x7f\x1f\xa4G\xb1{V\xff\x12\xa9m\x1a\xb2@\x9e\xec\xf7\xa6])\x9aR\xd2\x84\x0e\xb4\x19\x11\xfeHa\x06\xe9T$1\x85\x8d\xe1,\xd7\x12d\xa5z\x968\x9bu\xc9\xe16J:H\xe2|\x18Rz\xcb\r\xda\x92\xab\xd4\x0b}=g\xa10F\xce\x13U\x96PW\xdb\xfb\xf4\x14\xb2\x0fR!\xec \xa4\xdd\x81\xf8\xe5N\xa6=\xc6}i\xdcr\xb8h\x8a\xfc\xbf\xc40\xfa\x91J\xff\x16\xd6 \xa9\x9c\x8f"\xe5\xc8\x96Y\x0f\xfb^=\x1a\xab\xfd\x82J\x95\x16-\xd4\x82\x17\x06\xe9-5\xfb[\x8d\xe5\x06\xd2\xeb\x0c\x97\t@\x136\xa4\xceZ5A\xc8\x1f|!Q*\x81X\xba\x90\xf6\xad?\xc4e\x90NF\xb2\xea\x9b\xf9\x95\xf2\xf8\x1c~pm\xa4\x1a"\xb0\x0f\xb3\x95w\x90NEr\xbf]\xd3\xa8\xec# \xfc\x89\x1b\x1d\xaf\xab\nIB\xb6vPH\xf3A2K\x87!\x95\xb6K\x1e\x96F\r\xb6T\xdbr\xc0\xe83\xd0\xf5\xa7\xe8\xec\x98\x13\x13l-o\x90\x8eD\x92v\xea\xda\xc8\xb4\xe0\xce\x10\xfb6\xc0\x8f\xe8G\x1b\x8dd\xbaj\x90\xb6\xc7\x87\x91\xf2\t\x17;ss&C\xdb\x87A\x118XR\xc3IM\xa6\xc7\xf2\xf9\xbf\x82A\xea\\\xbf\x8c$w_T\xe2\x8e\xf3\xbaN\x9b"\x18\x11O\xe2\x8b\xf6m\xaa\x9c\xf7Q5\xe0 \x1d\x89\xb4qP\x9f\xc2\xff\x07\xa1v!\xa8K\xc2\x90\x8d\xf4g1U\xc0\xa71H\x8d\xd9\xbfG\xda\x1apO\xb1\xad\xb4\xe5\xe2\xdb%\xdc\xe6\x0f\x1a\x8a\x9d\xe7\x02\x162\x9a1H\xdfE\x8a\x073\x1dT>\xb1\xf9\xc1&\xe9]x\x01WVER\xd6\xff\xd1#\xff\x1e\x99\x1f\x83TJ\xe5X\x95\xdd\x07\x90\x8c\x12\x9a![\x95\xb162\xd9t\x17K\xa7\x18\xc6\x9e\x0c5\xf3 \xb5R\x0f@B\xde\x8c\xcbt\x8aM\x1d\x9cW\x12\x88\xf0\xa8\xad\xb1\xc3\xaf\xc3\x02\xc7\xc7A\xaa-\x82\xc1\x97\x91\xc2"\x1f\xc6\xa8\x84\x8d\x83\t\x08\xb8(R!"\xff\xabAu\xa2Vv\xafQ\xfc\xf3 \xfd\x06\xa4\xec\xbeq\xbe\x8dI\xe9e7\x1ez*\x7fl\xae\x06\xd4\x95\\\xd3\x1cv\x90\xda\xa5f\xe3CH\xbcf\xde-c-_E\x18\xac\x8d\xa4{\xb3\xb3\xea\xad\x8dJ;\xa3ArAN@j/Fw\x90\x1b9\xbe\xc7,\x976m\xb8\xa4s\xe9\x8c\x0e\xfd\x81`\xa6\x1f\xa4\x86\xe1\x10$\xb2)o\xc3\xf2`#4P\xe5K\xa1\x83\x9e\x98\xd6\xf9\xe3\xaa+!\x7f9\x97\xc5\x1e\xa4\xebL\xa4ZD\xb1y\x1fu\x12\xe2\xde\xc3?\x93^\x16\xf6\x8d\xe1;\xf8-\xfbA\xdaM\xf27\x91b\xbc[\'\x1f\xd2\xfb\xae,k\x82\xa7\x07\xfano^\xd6\xb9\xaeuD}+<\x92C\x947Hg#\xd9\xc3\x1e\xcfu\x7f\xbc\xed\xaek\x8bP\xb4\xb8+\x12\xc0\xabM\nz\xf0\xa53\x9a\x06\x89\xddy\xed\x03Hi\x8a\x92\x90O~\xce\xe3"$u}]\x8a!\xb1\xf6\x9c*A\x83T\xcb\xf8\x0eR\x99T~\x87\xab\xffl0\t0\xf1\x90\x8bS\xfd\x83\xa0M\xb8\xec\xc3CPt\xab\xccj\x06\xe9`$\x1b\xf5\xe9\xe0\x92\xa4*P\x17\'\xf4,\xae\x8czU%Q\x016\xe6 \xe5\x88g"\x05q\xa0\xedt\\\xab\x1a\x14\r\trx*R\x11\x91Wl\x18\xaaE\xd42H\xfax\nR\xd6d\x94\xd9\xe0 \xd1\xf9e\x07\xd8\xdc\xa9AS,\xa4\xd0\x8fP\xb47H)\xe7\xa1H;\xaby\xe7\x8d\xbeH\x0e?\xdaL\xe3^0Xj\xb3&\xaf0NT\xf9\xd7P\xe9jmz\xd7A\xfa#$\xda\xcd\xc1\x08\xc0\xb7\x87I\x9e\x1a\xac43\xe5\xa9^AW\xd6v\x0c\x92\x99\x9f\x85\x94\xd5\xdfip\xedq\x06]l\x9f$\xc6NH\xddEv.\x81\x14&\xb9\xbf\xe2\xe3^\x1b\xa4\xdf\x80\xb43\xfc;#\xd3@}\xcc\xd2\xd17%\x18\xf9\xe2\xcaT\t6\xc6 \xd5a\n\xc7\xbf\x8c\xa4\x11WK\xc5\xdb\xddw\n/\x95@[\x05t\xcc\xd4\xefi[\xed#\x80\xae\x0c\xd2\x83\xf2O"\x95\xb3\xdd\xfca\x1e\x8e{\xfb\xde\xbf\xbeo\xcb\x8e\xc4\xab\xb5\xa4\xa5\xccj~\x18\xa4<?\t\xa9H`\x12\xadF\xcb_\r\xe0=\xaf\xe0\xefv\xbd\xbf\x91\xdc\x1dM\xcd\xfa eaG!\x15-%\xd9\xab\xdd\x05\x04\xf6\xa9(\xdf\xe8Wv\xb0Zxq\x90\xd4\xf6<\xa4\xc2\x04\xb2\xceM`\x9ce\xefE&\xb4\xe2\x96{s\xf5\xece\xca\xa37\x80\xad\xd1 \x9d\x8e\x04\xbf\xa9\xb9YU\xd3\x13~KN=x\xado\x87\xacAm\xa9\xa5\x07\xa9\xd6\xddl}\x0c\xa9\x14\x12\x0fy#\xbfP\x17\x0b`\xbc\xdb\x80\x8e\xc5\x9a\xed\xc8\xe2\xc7A\x8aq\xbe\x87\x84um\xda(\xe9\x10\xbf\xde\xb6\xc4\x9f\xfa%_\xe7\xcamj\x94\x88\x08\xfe1\xa3\xc8#K6\x18\xa4\xe3\x918v\xd2\xf10\x9c\x11\xaa\x8d\x9f\xf5\x8c\x0f\xb6-\xbb#\xd9\xb2\xd5\x12\xad\xfe\x83\xd4d\xaf\x1c\xfe=\x12\xa2\x87\x04\x0e\x075\xa2\xc2\x16D\xf3q\xcbv\xaaS{\xe8FY\xbd"\xff \x1d\x8eD\xa1\\f+1,\xac\x8c\xb0{y\r\xb7\x87\xabaZ\xa8\xd3\xc9\xca]p\x122H\xd7\xb9Hn\xd4;n\xcb\x9c\xe2\xb4TF\xc3%U\xcc\x95\x94R\x81\xed\x1a\xa5\xa5\xc8\x8d\xadA\xca\xd6\xff\x1ai\xb5\x93\n\xc9=c\xba\'\xe7\x8dZ[#}\xdc\xae|\x170,\x0fR\x1b\xfc[H\xf4\x85\x8d\xb0\xf0\xac\xd1\xc3\r\xfa\xe3\xfe\xf3N\xcb[\xdc\x01ld,\xabV\xa5\xed\xc3A:\x13\xe9o\xb5\xa3m\x89\xd2m\xab\x0fe\x16mp\x07r\xd7\xc1\x83\x82V\x9bF\x18\xa4.\xea\x7fD\xf2\x01C \xf0\x9e\xf6a\xf0q\xf9I\x88I\xa4\xd3fic\xcb\x1b\x0e\xd2k~\x04R\xbcA\xf5\x8a\xb4\x97\xa6\x17\x8e4\xc72\x83\xb1\xd3$\xb6\x88\x1c\x19<\xa1vzE\x1a\xa4\xebx$\x91\xe3\x82^\x1e\xc3\x85\xb2\x06(\xb2\x99\x86b\xa5T\xf0\xd0\x90\xb9\x86\x17\x15d\x90\xc4\xee,$D\xafV\x8f\xd7\r~\xca\xec\xdaKFF\x1b\xb2\xf3\x8e\x84"\xc2D\x1a\xa4h\xfb]\xa4d\xc1\xbf\xe9G\r\x808\x8d\x96\xfe\xad\x102\xda\xe5\x8bG\xf8\xab\x90\xaf4u\xd7gy\xfeg\x99\x83t6R\xa1\xc4l\xfayk\x18\x96\x12T\xae\xca\xc3\x88\x1f\x16\x80\xb76}\x8b\xcd\xcdH\x83\xf47\x91`\xad@\xc9;\x96\xdcu0.\xd5\x01/\x07E0\x81\xcc5\x90\xb4\x0c\xd2\xe9H\x1aI\xac\xe3\xc3J\x12\xae\\=\xe4\x92\x1b\xcb\xab\xd4ck%X\xc9\xf8\xb1\xb5\x07\xe9h${\xeau\xb19\xfd~hI\xe2\x9ch3n/\xb0\xd8u\x16\x83\xf44\xbe\x83T\xc9\xec\xe4\xf3\xab\xdb\xb0\x16^;\x9a\xec\xdd\xf1\x0f@\xa97Qa\x96z\x07\xe9\xbau\x93\xd9AH\x14\x0e\x17\xc9\xbd\x85J\xbc.\x11CIS\xb9\x9f+V\xb0\xfd\x80\x99]\x83\xc4\x11\x0eD\xd2\x99vJ\xd4\xa2\xd1\xb6\xf2\x97F\xb6\x0bd)\x96\x07\xb1\xd1\x08@Wr\xd0Aj\xc7\'\x91\x8al\xa6\xa5\xd6\x8a?\xf6\xdc4;\xcc\xde$\xad\xde*\xf7\x1bl\x90\xceGz]\xa6r\xb5\x9a  \x805\x95[\xfa\xe2Z@\xed$jn\xd6\x94@\xec\x11\x1c\xc8r\x90~\x03\x92I`\x97\xbcma\xed;#z\x99\x98\x16\xc6T\xd5\xee\xa0i\xb6A\xf2\xd6\xdfDra\xb0\xb2\xc2\xba\x17\x9d\xa36\xf1\x1fz#\xefyx\xca\xca\xa6\xf6\x19\xa4\xd3\x90\x9eS\xe5\xa8\xf0\x08Qr\xf5#A\x9d#\xcd\x91\xc2\xb8\x0f\x03\xf8\x99\xfe\xcd\x91\xd8\xd5\x18\xa4#\x90\xa2\xabe\xeb\x0e\xf4\x1b\xdd\x11\x93E\x18\xeaB\x8a(\xc5\xb2R\xab"\x0cR\xb1R\x8e\x0f"\x19azD\x9d@\xaaEn\xb5\xce\xdbme\xe0\r\x01\x17C\xe4\xe0\x83\xf4\xb3y0\xd2\xfd\x05t\\\xd7Rx`\x7f\x1b5\xdaW6E\x8fjy\x917\xab7]\x12d\x90NFz:\xaf&\xd5[\x9f>q\xd2\xd83\x14\x0bd\x9e\x1f\xb82\xab\xf4\x1ca\x908\xc8\x1b\xe3cHqj]|\x9e\xac\x0e\xbc\x9ab\x12\xc5%n>\x85\x1dQiA\xa8\x86m\xe8A\xba\xbe\x83\xc4\x9f\xab \xf9\x85{\xf8\xd5{\x8e_\xf2\xe6F\xcd\xdf\xf1\xf4\x90ca\x95\nic\xa5\xf2\r:HG#\xb1\x98\xb7\x87\xb6T\x1bZ\x8d\xdcG\x8a\x10\x84-\x89\xb6&\xef\x8fA\xfa\x00\x92\x88\x81DO\x1e\x14\x12<\xe3\xd7\x8f\x0f\xb0\x91\x14"\xc4\xce\xf3\xa2\xa6\x1d\xa4_\x81D\xe2\x83\x1eV\x9b\xd8\x10\x96\xe1@\xa9\x12n\xbd\xd0\xfb\xc4o#\xab\xe8A:\x1d\xa9\x0eQ\xe4i\x1c\x9e\x9b\xe6\x87\xeb\xee\x03U\x15\x16W\xe9\x90\xb7!.\x9b2\n\xa3A\xe2\x9d\x0f \xad0\xa1\x91\xf4\xd8\x83\xbe\xca\xb5\xc9i,^\xc9\xfc\xdcc\x85W\xaaA\xf6\x1d\xa4\x93\x91\xecaN\xcfK\x1e\xbb\xe3\xca\xf8\x1b\x87<\xedP\x87\\\xfc\xd2C\n\x99\xbaO&\xfc}\x90\xceE\xea\xfaa\xeb4\x97r\xef\x07D\xf4\xa8\x15\xc6\xfe"\xd9\xb7\x01:\x0b\x17\xd6\xca\x19$\xeb\xf4\x05$\xe3\xe48\x9eN)\x17\xc7\xda\xbb!ri7\x05"c\x9e\xd5u\x18\xa4\xd7\xf40\xa4*\x93\xbc\x17B\xf8_C!\xfc\xe1\xacn\xa1Q\x02;\r.\xaf\t\xbc\x94"\xe2 \x1d\x83D\x1f\x0c\x82c\xd4\xea\xda\xe5\xb5\x83\x9c(\xe9\x88\xc6\xcb\x08\xc9\xff1\x8fI<H{\xcb\xd7\x17\x91\xac\x17\x1fT:\xf5$\xd1k(dHg<\x17\x10\xdb@\x8d\x82A:\x0b\t\xe4\x02\x96\xbf\x17\xbe\x15j}\xd0\xcc\xa5\xad(T\xecR8\x83A:\x1e\xa9xp\xc3\x18t\xe2\xefs}?#\x1b\x992\xd4\x1a(\x93\x16\xe1\xb1\xd0U\xd4>\xd1 i\xa4\xbf\x81\xe4\x8f^K\x07%\xb1\x02\xfa\x85\x87a^\xd3\xd8\x90\xa6#\x07\xe9g\xf3h$\xf3x\x9b\x06\xc2\xe2\xea\x0eaC\xa7\xe0\xde*\xden\xa9\x00\xa4ess\xbf|\xe1L|\x85\x07\xe9p\xa4\xd8U\xe68fX\x7fv\xddL\xc7R\x1d\xa1\xb9t\x95W\xb9\x96%E\x8cA\xbaNFj#\xd4\x12\x91\xf7\xe5\xb5\x01\xed>\x8dT\x95W\xecFL5oC?X\x0f\xd2\xd3\xf8{H/\x7f4v\x88G\xde|\x84#\x0ba\x8edv\xe7Z!QT#\xabx\xae\rD\xdf \x9d\x8cd\xbdc\x9c7\xdap\xcfr/\x88*\x8b%\xbe\x17r\x11$\xf4 \xed+\xda\xde\xaa\xac\xdeE*\x0c(3\xf2w\xe4\xff/\x8d\x9c\x9fab\xd0\x9c\xf4\x90\xdb~5\xafA\xfa\x1dH\xe2\x00\xdeZ\x9a\xe1,B\xd6\xa2\x0e\xb2\x98U\xaac\xed\x19eD\xf7\x97F\xffW2H1\xd9AH\xd6\xb93\xa8\x87\x94\x89\x9b\xcc\xd9\x06me@\x0e\x0c\xa1k\xd5\x0e\x92S\xf0E\xa4\xdc(\xf5\x19\x8e\x84\xae\x07\xf3\x14\xbc\xa6V\xdd w\\<s\xd9L\xf2A\xd2\xc86\xaa\r\xf54\xfe\x0c\xc9\x19\xbe\xac\xe0\xd4\xe5\x0b8\x07\x85\xc7\xcd\xd5j\xef\xd9\xc2\xaai\xc8\xe8[\xb3\x0f\xd2\x89H\xba\xfb<\xe8\xcc6\xb9\x8c\xb8\xbb`?\x14E)\xd0<\xc5z\xef\x8a\xdd\xb3\x1a\xa4O"U\xf6\xa1\x99\xea\x08\xb2\xfc\xd2mZ\xec\xd1\xf7m\x9b\xaa\xeb\x06\xe9!\xe5W\x91\x90\xb9\xf4\x86V/\xdc\x92\xb3;\x1b\xf1Ll\x91,R\x05\xca \xd6%Wp\x90~\x03\xd2\xbb\xa3\xf22\x05\xaa\r\xb5p\x81\x02\xe9{\x04G\\\xaf.\x85\xf7\xc7 y\xc3\x7f\x8d\x84\xeb\xee\t\\\x97Dj\x0et\xc8\xaf\xe1\xd7\xf9\xfe+\x87\xfc\xad\x08\x83\x94]\xcfDz\x88ue\xd2\xeb\n\xf8j\x13\x11\x8d\x8a\xdbJ\xebD\xad\xe5:-|\x83\x94\xda\xc6\x91\x10$$<\x0e\x92Z}\x18)tQ\xcf\xd6\x05qV\xdcr\xe0\x1d8\x96\xac5\xf7\x17\x91\x95J\x06\xe9<$m\x0b\xf63\x93\x87^d\x9b=hI\xfa\xb6[\x93q\x90\xfa\xa8\x9fG\x8aQ\xd2\xf5\x9c\xcf\xb1I\x02\x9e\xbe\xaeg\xadB\x88\x1e\x96r\x00\xd9~R{\x7f\xbf\xbf\xf8\xd6\x1f\xa4\x83\x91l\x00\x1fU\xfcP\xdbZ\xef\x9c\x1c\x0c"\xa0w\xa9\xd6$\xf8\xe5\xb2\xd9zV\xe2\xfd\xea }\x0cI\x9ab\xefT\x1b7\xaf\xad\x08\x00\x9f\xee\xb9<\x1b\xe5\x1b\xa4\xc6-\xad|\r\xa9\xdb\x97=Q\x19{I{\n\x12\xe2^\xa9\xd3\x96\xbd\x12\xb7q7V\xce\xfa\xd8\xd7\x83$._BJ\xa9pqJ\x04\xff\x9c\xab\xd2\xa5\x1c\xbcJ\xd8\xb7(\xf3\x1e\x0e\xe9OS~\xad\xd5 \xfd\x06\xa4\xda\xb0~\x84[Az\x8c\x85\xc9\x01R~\x8d\xbb&\xeaJ\xb9\xb9{\x1f\xc6 \x9d\x85\x14\xcf\xa2\x84\x82\xb8\xc6\'\xfd]\xbfBJ_Bg\xc8\x89\xb5O\x03\x97Q0Haz\x18R|\xc8G\x9d\xce\xe5\x9arGh\x8e\xaee\xf3\xcb\x02$)(}\xe4\xa1P\xf7\n8H\xa7#U\xa9\x97c\xd5\x02\xeb\x18k\x12\xbfP\x85\xf8\xb3\xd1\xdf\x10\xf24H]\xc0&\xc4\x9f\r\x83$\xa7O\xafJ&\xac\xa5\xc4\x9fd\xaf\x85;\x028-\xf2\xc6JO\x8d\x15\xb2\xd6\xf2\x92\xceA:\x1a\x89\xf2YC&O3\xf0Z\x91(\xaf\xcbB1\\\t\xa2`\xa7{\x90tv\x1e\x92\x0b\x0bY\xd7\x7f\xd7\x91\x0c\xccQ\x0e}\x11\xe3I\x16}\xfb}\xcb\xac;fs\x0cR28\n\xa9\xea\x13\xf5\xb6\x99\xcb&\xd2\xb2t\xca\xb8%\x8a\x82]\xa9`\x868\xc4\x19\xa4\xf8|\x1eR\xb6b\xb5\xf6\xae\xf5M\xd7~p\xf82F\xf1t\x15\x15\xe2\xbe\xbc\xd7\x90\x97\x19f\x90~\x03\x92\x9c\xd7"w\xd1L\xaaL\xd45\xb0\x06K^\xf9\n?\xb7\x9e\x8f;H\xf1\xf9H$\x9b\xd9\xfc\xab\x0fZOGXD\\T\x0f\xe4\xf9^\'Ry\xb8\xf8\xafF\xaa\xf8\x06\xe9T$R!]\xb5\x87\xbf\xb3a\xf6\xa5\xe9\xea\x96~\xdc\\U\x1b\xa4\xc7\xf5\x03\x90\xd2\xb6\xf4B\x15"\x9bC\x96\xe2kb\xca\xe1g\x95%a\xd7\xf5\xd2\x9dA\xfa\rH\xd5N\xbau\xaft\xf5\xf6\xb7n\xb1\x94a\xbc\xf4\xb5S\xe2\xa8\x9a\xdbU\xf2\x0f\x92\x19\xdfGB4\xc8q\xea\xe3\xcb\xbd\xe0-\x8d`IV$(\xd7A\x9cAhr\x1c\xa4\xd3\x91\n\x87w\xd2\x90\x85h\xf6\xbd$\xc1\xe0\x97\xaf\xee\x85\xf6\xb3\xb8A\xf2\x16\xdfGZ\x97\x1e\xc8@/\xc8h\x98\x9b\x90}\xef\x08^\x0c\xcb\xe7\xe6l\x9e\xee\xa8\x0e4$\x1e\xa4\xc3\x91\xecrL\xd1\xbbf\xcbr\xc4\x92p\x9f\x85\x1e\xc8\x12\xaa\x86\xcc\xcbd\xec\xec\x06\x89\x82\x17\xe3\xb3H\xa9\x17\xc0\xc6)5\xae\xc2\xd6KT\x0bd\xbb\xbe\xd1\xfc\xb05p\x11\x06\xa9\x0ex\x04\x12\x8bd\x9f\xdc[Exi\xb9\x9c6\x1aj\xe6W\xa5(3\xb2}\xa9\x1f\xb7k\x8a6H\xe7#\xb5\x1e\x8aA\xd6\xea\xe9{\xaei\x01\xf8\xa7\x15\x87\xb3\xaa\xfeR\xea\xf3\x18$\xf3\xfd_#\xfd\x1f\x81\xbe\x87\xbe'
    uncompressed_dots = zlib.decompress(bytes(compressed_dots, "latin_1"))
    data = np.fromstring(uncompressed_dots, dtype=np.bool)
    mask = data.reshape(495, 633)
    

class Kinect(object):
    """Kinect implementation in Pybullet.

    Generate realistic scan based on raycasting in Pybullet.
    Based on the implementation in Blensor framework
    https://github.com/mgschwan/blensor/blob/master/release/scripts/addons/blensor/kinect.py

    Papers:
    Gschwandtner, M., Kwitt, R., Uhl, A., & Pree, W. (2011, September).
    BlenSor: Blender sensor simulation toolbox.
    In International Symposium on Visual Computing (pp. 199-208).
    Springer, Berlin, Heidelberg.
    
    GSCHWANDTNER, Michael.
    Support framework for obstacle detection on autonomous trains.
    na, 2012.

    """
    # Intrinsic parameters of the kinect
    # BE CAREFULL : min_dist and max_dist need to be tuned with your real kinect
    # It can changed with the mode (default or near) and hardware.
    # Default : noise_mu = 0., noise_sigma = 0., noise_scale = 0.25, noise_smooth = 1.5
    parameters = {"max_dist": 7.0, "min_dist": 0.4, "noise_mu": 0.,
                  "noise_sigma": 0.2, "xres": 640, "yres": 480,
                  "flength": 4.73, "reflectivity_distance": 0.0,
                  "reflectivity_limit": 0.01, "reflectivity_slope": 0.16,
                  "noise_scale": 0.25, "noise_smooth": 1.5,
                  "inlier_distance": 0.05, "vert_fov": 43.1845,
                  "horiz_fov": 55.6408, "pixel_width": 0.0078,
                  "pixel_height": 0.0078, "baseline": [0.075, 0.0, 0.0]}
    kinect_dots = KinectDots()
    INVALID_DISPARITY = 99999999.9
    WINDOW_INLIER_DISTANCE = 0.1
    threshold_disparity = 0.001

    def __init__(self, pybullet, x, R, id_server):
        """Constructor.

        Parameters
        ----------
        x: the (x,y,z) position in world coordinates
        R: the rotation, in quaternions, in world coordinates
        """
        # Pybullet id server
        self.id_server = id_server
        # Create multibody for the kinecti
        self.kinect_id = pybullet.loadURDF(kinect_pybullet.KINECT_URDF,
                                           basePosition=x,
                                           baseOrientation=R,
                                           physicsClientId=self.id_server)
        self.noisy_max = self.get_noisy_max(sigma=0.)
        self.noisy_min = self.get_noisy_min(sigma=0.)
        self.noisy_flength = self.get_noisy_flength(error=0.)

    def get_uv_from_idx(self, idx, res_x, res_y):
        """Calculate the Image coordinates on the sensor for a given ray.

        This function assumes that the rays are generated like
        for y in range(res_y):
            for x in range(res_x):
        """
        return ((idx % res_x)-res_x/2, (idx//res_x)-res_y/2)

    def get_pixel_from_world(self, X, Z, flength_px):
        """Calculate the pixel coordinate from the world coordinates the focal
        length and the width of a pixel.

        X,Z are in meters, flength is in pixel
        """
        return (flength_px*X/Z)
    
    @classmethod
    def get_pts3d_from_depth(cls, depth_img):
        """Return the 3d point cloud assiciated with the depth map.
        
        [x, y, z, 1] = z@inverse_matrix@[u, v, 1, 1/z]
        """ 
        fx = cls.parameters["flength"]
        fy = cls.parameters["flength"]
        cy = cls.parameters["xres"]/2
        cx = cls.parameters["yres"]/2 
        
        u = np.linspace(0, depth_img.shape[0]-1, depth_img.shape[0])
        v = np.linspace(0, depth_img.shape[1]-1, depth_img.shape[1])
        vv, uu = np.meshgrid(v, u)
    
        x = depth_img*(cx - uu)/fx*cls.parameters["pixel_height"]
        y = depth_img*(cy - vv)/fy*cls.parameters["pixel_width"]
        pts_3d = np.concatenate((x.reshape((x.shape[0], x.shape[1], 1)),
                                 y.reshape((y.shape[0], y.shape[1], 1)),
                                 depth_img.reshape((depth_img.shape[0], depth_img.shape[1], 1))),
                                axis=-1).reshape((-1, 3))
        
        return pts_3d

    def add_shift_noise(self, img):
        """Add noise by randomly shifting depth values and gaussian noise.

        Paper:
        JOHNS, Edward, LEUTENEGGER, Stefan, et DAVISON, Andrew J.
        Deep learning a grasp function for grasping under
        gripper pose uncertainty.
        In : 2016 IEEE/RSJ International Conference on
        Intelligent Robots and Systems (IROS).
        IEEE, 2016. p. 4461-4468.

        Parameters
        ----------
        img: a numpy array

        Returns
        -------
        noisy_img: the noisy image
        """
        noisy_image = img.copy()
        ci, ri = np.meshgrid(np.arange(0, img.shape[1], 1),
                             np.arange(0, img.shape[0], 1))
        col_index = ci + np.random.normal(0, 1, img.shape).astype(np.int32)
        row_index = ri + np.random.normal(0, 1, img.shape).astype(np.int32)

        col_index[col_index >= img.shape[1]] = img.shape[1] - 1
        row_index[row_index >= img.shape[0]] = img.shape[0] - 1
        col_index[col_index < 0] = 0
        row_index[row_index < 0] = 0
        
        noisy_img = noisy_image[row_index, col_index]

        return noisy_img

    def add_axial_noise(self, depth_img):
        """Gaussian deviation for axial noise on depth images.

        Paper:
        NGUYEN, Chuong V., IZADI, Shahram, et LOVELL, David.
        Modeling kinect sensor noise for improved 3d reconstruction and
        tracking.
        In : 2012 second international conference on 3D imaging, modeling,
        processing, visualization & transmission.
        IEEE, 2012. p. 524-530.

        Parameters
        ----------
        z: float, depth

        Returns
        -------
        sigma: float, std for axial noise
        """
        sigma = 0.0012 + 0.0019 * (depth_img - 0.4) ** 2
        depth_noise = np.random.normal(0, sigma)
        
        noisy_img = depth_img + depth_noise

        return noisy_img
    
    def add_perlin_noise(self, depth_img):
        """Add perlin noise for some value of the depth."""
        max_amplitude = 0.007  # 7mm
        perlin_noise = max_amplitude*generate_perlin_noise_2d(depth_img.shape, (48, 64))
        depth_index = (depth_img > 0.5) & (depth_img < 1.5)
        noisy_img = depth_img.copy()
        noisy_img[depth_index] += perlin_noise[depth_index]
        
        return noisy_img
    
    def get_noisy_min(self, sigma=0.005):
        """Add gaussian noise to the minimum value of the Kinect."""
        return np.random.default_rng().normal(self.parameters["min_dist"],
                                              sigma, 1)

    def get_noisy_max(self, sigma=0.005):
        """Add gaussian noise to the maximum value of the Kinect."""
        return np.random.default_rng().normal(self.parameters["max_dist"],
                                              sigma, 1)
    
    def get_noisy_flength(self, error=0.02):
        """Add noise onto the flenght.
        
        Use an uniform distribution between flength +/- error (in %)
        """
        low = (1 - error) * self.parameters["flength"]
        high = (1 + error) * self.parameters["flength"] + self.parameters["flength"]*error
        return np.random.default_rng().uniform(low, high, 1)

    def fast_9x9_window(self, distances, res_x, res_y, disparity_map,
                        noise_smooth, noise_scale):
        """Fast 9x9 windonw matching for disparity.

        This checks a 9x9 window around the point in idx if the depth values
        would allow the kinect to do a correct matching. If for example some
        value would be missing, the kinect could not match the image to the
        projector pattern
        #TODO: determine how big the depth-difference can be to still produce a
        valid depth measurement. Note: This has to be verified by a real kinect
        """
        data = distances.reshape(res_y, res_x)
        disp_data = disparity_map.reshape(res_y, res_x)
        disp_data[:] = self.INVALID_DISPARITY
          
        """Highly experimental. Just a quick hack for alexandru"""
        pnoise = kinect_pybullet.PerlinNoise(size=(res_x,res_y))
        #It is important to reshape it exactly as it was generated (w,h)
        noise_field = (pnoise.getData(scale=32.0)-1.0).reshape((res_x,res_y)) 
        """-------------"""
        weights = np.array([1.0/float((1.2*x)**2+(1.2*y)**2) if x!=0 or y!=0 else 1.0 for x in range(-4,5) for y in range (-4,5)]).reshape((9,9))
        
        """We don't want to fill the whole 9x9 region with the current disparity
        this fills too much gaps in the depthmap
        """
        fill_weights = np.array([1.0/(1.0+float(x**2+y**2)) if np.sqrt(x**2+y**2)<3.1 else -1.0 for x in range(-4,5) for y in range (-4,5)]).reshape((9,9))

        interpolation_map = np.zeros((res_y,res_x))
            
        for y in range(min(self.kinect_dots.mask.shape[0]-9, data.shape[0]-9)):
            for x in range(min(self.kinect_dots.mask.shape[1]-9,data.shape[1]-9)):
                if self.kinect_dots.mask[y+4,x+4] and data[y+4,x+4] < self.INVALID_DISPARITY:
                    window = data[y:y+9,x:x+9]
                    dot_window = self.kinect_dots.mask[y:y+9,x:x+9]
                    valid_values = window < self.INVALID_DISPARITY
                    valid_dots = valid_values & dot_window
                    if np.sum(valid_dots) > np.sum(dot_window)/1.5:
                        mean = np.sum(window[valid_values])/np.sum(valid_values)
                        differences = np.abs(window-mean)*weights
                        valids = (differences < self.WINDOW_INLIER_DISTANCE) & valid_dots
                        pointcount = np.sum(weights[valids])
                        if np.sum(valids) > np.sum(dot_window)/1.5:
                            accu = window[4, 4]
                            disp_data[y+4, x+4] = np.floor((accu + noise_scale*noise_field[np.int32((x+4)/noise_smooth), np.int32((y+4)/noise_smooth)])*8.0)/8.0
                            interpolation_window = interpolation_map[y:y+9,x:x+9]
                            disp_data_window = disp_data[y:y+9,x:x+9]
                            substitutes = interpolation_window < fill_weights
                            disp_data_window[substitutes] = disp_data[y+4,x+4]
                            interpolation_window[substitutes] = fill_weights[substitutes]
    
    def emit_projector(self, pybullet, show_scan=False):
        """Emit rays from the projecto of the Kinect.

        It takes into account the maximum rays that Pybullet can cast with
        respect to the resolution of the Kinect.
        """
        # Split the full window into small windows
        nb_window = 5
        y_win = self.parameters["yres"]//nb_window
        x_win = self.parameters["xres"]//nb_window

        cx = self.parameters["xres"]/2.
        cy = self.parameters["yres"]/2.
        x, y = np.meshgrid(np.arange(0, self.parameters["xres"]), np.arange(0, self.parameters["yres"]))
        physical_x = ((x-cx)*self.parameters["pixel_width"]).reshape((self.parameters["yres"], self.parameters["xres"], 1))
        physical_y = ((y-cy)*self.parameters["pixel_height"]).reshape((self.parameters["yres"], self.parameters["xres"], 1))
        physical_z = -np.ones(shape=(self.parameters["yres"], self.parameters["xres"], 1))*self.noisy_flength
        physical_window = np.concatenate([physical_x, physical_y, physical_z], axis=-1)
        
        # Loop into small windows
        # It allows to decrease the overhead of the raycast function
        results = np.zeros(shape=(self.parameters["yres"], self.parameters["xres"], 3))
        for i in range(nb_window):
            for j in range(nb_window):
                norm = np.linalg.norm(physical_window[y_win*j:y_win*(j+1), x_win*i:x_win*(i+1), :], axis=-1, keepdims=True)
                ray_from = (physical_window[y_win*j:y_win*(j+1), x_win*i:x_win*(i+1), :]/norm).reshape((-1, 3))
                # Multiply by 2 the max_dist because the distance can be
                # actually greater than max dist in a scene
                ray_to = ray_from*self.noisy_max_dist *2
                
                ray_results = pybullet.rayTestBatch([[0., 0., 0.]]*96*128, ray_to,
                                                    parentObjectUniqueId=self.kinect_id,
                                                    parentLinkIndex=-1,
                                                    physicsClientId=self.id_server)
                hit_frac = [res[2] for res in ray_results]
                results[y_win*j:y_win*(j+1), x_win*i:x_win*(i+1), :] = np.array(hit_frac).reshape((96, 128, 1))*ray_to.reshape((96, 128, 3))
                
        # Debug: show the rays
        if show_scan:
            for i in range(results.shape[0]):
                for j in range(results.shape[1]):
                    if (i%40 == 0) and (j%40==0):
                        pybullet.addUserDebugLine([0., 0., 0.], results[i, j, :].tolist(),
                                                  [1, 0, 0],
                                                  parentObjectUniqueId=self.kinect_id,
                                                  physicsClientId=self.id_server)
        
        return results
    
    def emit_camera(self, pybullet, project_rays, show_scan=False, add_reflectivity=True):
        """Emit rays from the camera of the Kinect.
        
        It emits ray cast to "project_rays" and check if the collision occurs
        at the same location. If yes, this is a valid point for the image

        It takes into account the maximum rays that Pybullet can cast with
        respect to the resolution of the Kinect."""
        # Split the full window into small windows
        nb_window = 5
        y_win = self.parameters["yres"]//nb_window
        x_win = self.parameters["xres"]//nb_window
        
        # Loop into small windows
        # It allows to decrease the overhead
        results = np.zeros(shape=(self.parameters["yres"], self.parameters["xres"], 3))
        for i in range(nb_window):
            for j in range(nb_window):
                ray_to = project_rays[y_win*j:y_win*(j+1), x_win*i:x_win*(i+1), :].reshape((-1, 3))
                ray_results = pybullet.rayTestBatch([self.parameters["baseline"]]*96*128, ray_to,
                                                    parentObjectUniqueId=self.kinect_id,
                                                    physicsClientId=self.id_server)
                hit_frac = [res[2] for res in ray_results]
                results[y_win*j:y_win*(j+1), x_win*i:x_win*(i+1), :] = np.array(hit_frac).reshape((96, 128, 1))*ray_to.reshape((96, 128, 3))

        # Debug: show the rays
        if show_scan:
            for i in range(results.shape[0]):
                for j in range(results.shape[1]):
                    if (i%40 == 0) and (j%40==0):
                        pybullet.addUserDebugLine(self.parameters["baseline"], results[i, j, :].tolist(),
                                                  [0, 1, 0],
                                                  parentObjectUniqueId=self.kinect_id,
                                                  physicsClientId=self.id_server)
        # Check reflectivity
        if add_reflectivity:
            min_reflectivity = self.reflectivity_limit(results)
            idx_reflectivity = min_reflectivity > 1
            results[idx_reflectivity] = 0.
        
        return results
    
    def reflectivity_limit(self, rays):
        """Compute the minimum reflectivty that will cause a laser return.
        
        Based on:
        https://github.com/mgschwan/blensor/blob/master/release/scripts/addons/blensor/scan_interface_pure.py
        """
        # Distance
        dist = np.linalg.norm(rays, axis=-1)
        min_reflectivity = -np.ones(shape=dist.shape)
        idx = dist >= self.parameters["reflectivity_distance"]
        min_reflectivity[idx] = self.parameters["reflectivity_limit"] \
                                + self.parameters["reflectivity_slope"] * (dist[idx]-self.parameters["reflectivity_distance"])

        return min_reflectivity
    
    
    def disparity_map(self, projector_rays, camera_rays):
        """Compute the disparity map."""
        all_quantized_disparities = np.empty(self.parameters["yres"]*self.parameters["xres"])
        all_quantized_disparities[:] = self.INVALID_DISPARITY
        
        # Subtract element wise the two results
        results_rays = np.abs(np.subtract(projector_rays, camera_rays))
        # Take rays which are valid
        intersec_idx = results_rays < self.threshold_disparity
        intersec_idx = intersec_idx[:, :, 0] & intersec_idx[:, :, 1] & intersec_idx[:, :, 2]
        # Min-Max distances take into account
        min_idx = np.abs(camera_rays[:, :, 2]) >= self.noisy_min_dist
        max_idx = np.abs(camera_rays[:, :, 2]) <= self.noisy_max_dist
        dist_idx = min_idx & max_idx
        # The ray hit the projected ray, so this is a valid measurement
        valid_idx = intersec_idx & dist_idx
        final_rays = camera_rays[valid_idx] # Shape is (nb_pts, 3)
        camera_coord = np.where(valid_idx)

        # Disparity
        nb_rays = final_rays.shape[0]
        noise = np.random.normal(self.parameters["noise_mu"], self.parameters["noise_sigma"], (nb_rays, 1))
        camera_x = self.get_pixel_from_world(final_rays[:, 0], final_rays[:, 2],
                               self.noisy_flength/self.parameters["pixel_width"])
        camera_x = camera_x.reshape((-1, 1)) + noise

        camera_y = self.get_pixel_from_world(final_rays[:, 1], final_rays[:, 2],
                               self.noisy_flength/self.parameters["pixel_width"])
        # Kinect calculates the disparity with an accuracy of 1/8 pixel
        camera_x_quantized = (np.floor(camera_x*8.0)/8.0).reshape((-1, 1))
        camera_y_quantized = np.floor(camera_y*8.0)/8.0 
        disparity_quantized = camera_x_quantized + camera_coord[1].reshape((-1, 1))
        disp_idx = camera_coord[1] + self.parameters["xres"]*camera_coord[0]
        all_quantized_disparities[disp_idx] = disparity_quantized.reshape((-1))

        return all_quantized_disparities, camera_coord

    def scan(self, pybullet, show_scan=False, add_reflectivity=True, add_noise=True):
        """Scan with the Kinect model.

        1) Emit rays from the projector
        2) Emit rays from the camera to the hit points
        3) Compute the disparity
        4) Fast 9x9 windows
        5) Return depth map
        """
        # Add noise to parameters
        if add_noise:
            self.noisy_max_dist = self.get_noisy_max()
            self.noisy_min_dist = self.get_noisy_min()
            self.noisy_flength = self.get_noisy_flength()
        # Or use the ground truth
        else:
            self.noisy_max_dist = self.get_noisy_max(0.)
            self.noisy_min_dist = self.get_noisy_min(0.)
            self.noisy_flength = self.get_noisy_flength(0.)
        
        # Rays from projector
        projector_rays = self.emit_projector(pybullet, show_scan)
        # Rays from camera
        camera_rays = self.emit_camera(pybullet, projector_rays, show_scan, add_reflectivity)
        # Disparity map
        all_quantized_disparities, camera_coord = self.disparity_map(projector_rays, camera_rays)

        # Window 9x9 matching for disparity map
        processed_disparities = np.empty(self.parameters["xres"]*self.parameters["yres"])
        self.fast_9x9_window(all_quantized_disparities, self.parameters["xres"],
                             self.parameters["yres"], processed_disparities,
                             self.parameters["noise_smooth"],
                             self.parameters["noise_scale"])
        # Use the process disparity
        disparity_quantized = processed_disparities
        
        #disparity_quantized = all_quantized_disparities
        depth_idx = (disparity_quantized.reshape((self.parameters["yres"], self.parameters["xres"])) < self.INVALID_DISPARITY) & \
                    (disparity_quantized.reshape((self.parameters["yres"], self.parameters["xres"])) != 0.0)
                    
        # Depth img based on disparity map
        depth_img = np.zeros((self.parameters["yres"], self.parameters["xres"]))
        depth_img[depth_idx] = -projector_rays[depth_idx][:, 2]
        # 3 types of noise
        if add_noise:
            # Add random shifting in the value of depth
            #depth_img = self.add_shift_noise(depth_img)
            # Add gamma noise
            #depth_img = self.add_gamma_noise(depth_img)
            # Add perlin noise in a given range
            #depth_img = self.add_perlin_noise(depth_img)
            # Add gaussian noise where the variance depends on depth values.
            depth_img = self.add_axial_noise(depth_img)
            
        else:
            pass
        # Assure that depth values are positives, {0} U [min_dist, max_dist]
        depth_img[depth_img < self.noisy_min_dist] = 0.
        depth_img[depth_img > self.noisy_max_dist] = 0.
    
        return depth_img
        

def test_kinect_scan():
    import pybullet as p
    import pybullet_data
    # Connect to the pybullet server and get additional data
    id_server = p.connect(p.GUI)
    p.setAdditionalSearchPath(pybullet_data.getDataPath())
    # Add object
    p.loadURDF('plane.urdf')
    p.loadURDF("r2d2.urdf", [0, 0, 0.5], [0., 0., np.sin(np.pi/2), np.cos(np.pi/2)])
    # Kinect object
    kinect = Kinect(p, [0., -1.7, 1.2], [np.sin(np.pi/5), 0, 0, np.cos(np.pi/5)], id_server)
    # Scan and visualize
    depth_img = kinect.scan(p, show_scan=True)
    # Show the depth img
    plt.imshow(np.flipud(depth_img), cmap="gray")
    plt.axis("off")
    plt.show()
    # Disconnect from pybullet
    p.disconnect(id_server)


def test_3d_pts_cloud_scan():
    import pybullet as p
    import pybullet_data
    import trimesh
    # Connect to the pybullet server and get additional data
    id_server = p.connect(p.GUI)
    p.setAdditionalSearchPath(pybullet_data.getDataPath())
    # Add object
    p.loadURDF('plane.urdf')
    p.loadURDF("r2d2.urdf", [0, 0, 0.5], [0., 0., np.sin(np.pi/2), np.cos(np.pi/2)])
    # Kinect object
    kinect = Kinect(p, [0., -1.7, 1.2], [np.sin(np.pi/5), 0, 0, np.cos(np.pi/5)], id_server)
    # Scan 
    depth_img = kinect.scan(p)
    pts3d = kinect.get_pts3d_from_depth(depth_img)
    print("Shape", pts3d.shape)
    
    mesh = trimesh.Trimesh(vertices=pts3d)
    mesh.export("test_3dpts.ply")
    # Disconnect from pybullet
    p.disconnect(id_server)
    


def compare_depth_map():
    import pybullet as p
    import pybullet_data
    # Connect to the pybullet server and get additional data
    id_server = p.connect(p.GUI)
    p.setAdditionalSearchPath(pybullet_data.getDataPath())
    # Add object
    p.loadURDF('plane.urdf')
    p.loadURDF("r2d2.urdf", [0, 0, 0.5], [0., 0., np.sin(np.pi/2), np.cos(np.pi/2)])
    # Kinect object
    kinect = Kinect(p, [0., -1.7, 1.2], [np.sin(np.pi/5), 0, 0, np.cos(np.pi/5)], id_server)
    results = p.rayTestBatch([[0, 0, 0]], [[0, 0, -7]], parentObjectUniqueId=kinect.kinect_id)
    # Scan and visualize
    depth_img = kinect.scan(p, show_scan=False)
    plt.subplot(121)
    plt.axis("off")
    plt.title("Ray casting rendering")
    plt.imshow(np.flipud(depth_img), cmap="gray")
    
    width = kinect.parameters["xres"]
    height = kinect.parameters["yres"]
    fov = kinect.parameters["vert_fov"]
    aspect = width / height
    near = kinect.parameters["min_dist"] 
    far = kinect.parameters["max_dist"] 
    
    view_matrix = p.computeViewMatrix([0., -1.7, 1.2], results[0][3], [0, 0, 1])
    projection_matrix = p.computeProjectionMatrixFOV(fov, aspect, near, far)
    
    # Get depth values using the OpenGL renderer
    images = p.getCameraImage(width,
                              height,
                              view_matrix,
                              projection_matrix,
                              shadow=True,
                              renderer=p.ER_BULLET_HARDWARE_OPENGL)
    rgb_opengl = np.reshape(images[2], (height, width, 4)) * 1. / 255.
    depth_buffer_opengl = np.reshape(images[3], [height, width])
    depth_opengl = far * near / (far - (far - near) * depth_buffer_opengl)
    plt.subplot(122)
    plt.axis("off")
    plt.imshow(depth_opengl, cmap="gray")
    plt.title("OpenGL z buffer")
    plt.show()
    p.disconnect(id_server)


if __name__ == "__main__":
    # Show the rays casting
    #test_kinect_scan()
    # Compare to OpenGL buffer
    #compare_depth_map()
    # Show 3d point cloud
    test_3d_pts_cloud_scan()
    
    
